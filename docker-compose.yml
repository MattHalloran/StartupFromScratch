version: '3.8'

services:
  postgres:
    container_name: postgres
    image: ankane/pgvector:v0.4.4
    restart: always
    environment:
      POSTGRES_PASSWORD: "${DB_PASSWORD}"
      POSTGRES_USER: "${DB_USER:-site}"
      PROJECT_DIR: "${PROJECT_DIR:-/srv/app}"
      PGPORT: "${PORT_DB:-5432}"
    expose:
      - ${PORT_DB:-5432}
    networks:
      - app
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
      - ./packages/prisma/entrypoint:/docker-entrypoint-initdb.d
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DB_USER:-site} && psql -U ${DB_USER:-site} -d postgres -c 'SELECT 1'" ]
      interval: 10s
      timeout: 5s
      retries: 5
    command: /bin/sh -c "exec docker-entrypoint.sh postgres"

  redis:
    container_name: redis
    image: redis:7.4.0-alpine
    restart: always
    environment:
      REDIS_PASSWORD: "${REDIS_PASSWORD}"
      PROJECT_DIR: "${PROJECT_DIR:-/srv/app}"
    networks:
      - app
    volumes:
      - ./data/redis:${PROJECT_DIR:-/srv/app}/data/redis:z
      - ./scripts/redis:${PROJECT_DIR:-/srv/app}/scripts/redis
    expose:
      - ${PORT_REDIS:-6379}
    command: /bin/sh -c "${PROJECT_DIR:-/srv/app}/scripts/redis/startRedis.sh"
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5

  # adminer:
  #   image: ghcr.io/jeliebig/adminer-autologin
  #   container_name: adminer
  #   restart: always
  #   environment:
  #     ADMINER_PLUGINS: login-env-vars
  #     ADMINER_DRIVER: pgsql
  #     ADMINER_SERVER: db
  #     ADMINER_USERNAME: "${DB_USER:-site}"
  #     ADMINER_PASSWORD: "${DB_PASSWORD}"
  #     ADMINER_DB: "${DB_NAME}"
  #   networks:
  #     - app
  #   depends_on:
  #     db:
  #       condition: service_healthy
  #   ports:
  #     - 8080:8080
  #   command: /bin/sh -c "exec php -S [::]:8080 -t /var/www/html/"

  server:
    container_name: server
    build:
      context: .
      dockerfile: Dockerfile
      target: server
    ports:
      - "${PORT_SERVER}:${PORT_SERVER}"
    depends_on:
      - postgres
      - redis
    networks:
      - app

  jobs:
    container_name: jobs
    build:
      context: .
      dockerfile: Dockerfile
      target: jobs
    depends_on:
      - postgres
      - redis
    ports:
      - "${PORT_JOBS}:${PORT_JOBS}"
    networks:
      - app

  ui:
    container_name: ui
    build:
      context: .
      dockerfile: Dockerfile
      target: ui-dev
    ports:
      - "${PORT_UI}:${PORT_UI}"
    depends_on:
      - server 
    networks:
      - app

networks:
  app:
