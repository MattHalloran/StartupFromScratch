# Run this file by typing: docker-compose up -d
version: "3.9"
services:
  ui:
    build:
      context: .
      dockerfile: ./Dockerfile
      target: ui-dev
      args:
        PROJECT_DIR: "${PROJECT_DIR:-/srv/app}"
    container_name: ui
    image: ui:dev
    restart: always
    environment:
      NODE_ENV: "development"
      VITE_SERVER_LOCATION: "${SERVER_LOCATION}"
      VITE_PORT_API: "${PORT_API:-5329}"
      VITE_API_URL: "${API_URL}"
      VITE_SITE_IP: "${SITE_IP}"
      VITE_VAPID_PUBLIC_KEY: "${VAPID_PUBLIC_KEY}"
      VITE_STRIPE_PUBLISHABLE_KEY: "${STRIPE_PUBLISHABLE_KEY}"
      VITE_GOOGLE_ADSENSE_PUBLISHER_ID: "${GOOGLE_ADSENSE_PUBLISHER_ID}"
      VITE_GOOGLE_TRACKING_ID: "${GOOGLE_TRACKING_ID}"
      PROJECT_DIR: "${PROJECT_DIR:-/srv/app}"
    ports:
      - ${PORT_UI:-3000}:${PORT_UI:-3000}
    networks:
      - app
    volumes:
      - ./packages/ui:${PROJECT_DIR:-/srv/app}/packages/ui:z
      - ./packages/shared:${PROJECT_DIR:-/srv/app}/packages/shared:z
      - ./scripts:${PROJECT_DIR:-/srv/app}/scripts:z
    healthcheck:
      test:
        - CMD-SHELL
        - |
          node -e "require('http').request({hostname: 'localhost', port: ${PORT_UI:-3000}, path: '/'}, res => { if (res.statusCode >= 200 && res.statusCode < 400) { process.exit(0) } else { process.exit(1) } }).on('error', err => { process.exit(1) }).end()"
      start_period: 60s
      interval: 20s
      timeout: 5s
      retries: 5
    command: /bin/sh -c "${PROJECT_DIR:-/srv/app}/scripts/package/ui/start.sh"
  server:
    build:
      context: .
      dockerfile: ./Dockerfile
      target: server
      args:
        PROJECT_DIR: "${PROJECT_DIR:-/srv/app}"
    container_name: server
    image: server:dev
    restart: always
    environment:
      NODE_ENV: "development"
      ADMIN_WALLET: "${ADMIN_WALLET}"
      ADMIN_PASSWORD: "${ADMIN_PASSWORD}"
      AWS_ACCESS_KEY_ID: "${AWS_ACCESS_KEY_ID}"
      AWS_SECRET_ACCESS_KEY: "${AWS_SECRET_ACCESS_KEY}"
      VALYXA_PASSWORD: "${VALYXA_PASSWORD}"
      PROJECT_DIR: "${PROJECT_DIR:-/srv/app}"
      VITE_SERVER_LOCATION: "${SERVER_LOCATION}"
      VITE_PORT_API: ${PORT_API:-5329}
      REDIS_URL: "${REDIS_URL}"
      DB_URL: "${DB_URL}"
      JWT_PRIV: "${JWT_PRIV}"
      JWT_PUB: "${JWT_PUB}"
      EXTERNAL_SITE_KEY: "${EXTERNAL_SITE_KEY}"
      OPENAI_API_KEY: "${OPENAI_API_KEY}"
      ANTHROPIC_API_KEY: "${ANTHROPIC_API_KEY}"
      MISTRAL_API_KEY: "${MISTRAL_API_KEY}"
      CREATE_MOCK_DATA: "${CREATE_MOCK_DATA}"
      SITE_EMAIL_FROM: "${SITE_EMAIL_FROM}"
      VAPID_PUBLIC_KEY: "${VAPID_PUBLIC_KEY}"
      VAPID_PRIVATE_KEY: "${VAPID_PRIVATE_KEY}"
      SITE_EMAIL_USERNAME: "${SITE_EMAIL_USERNAME}"
      SITE_EMAIL_PASSWORD: "${SITE_EMAIL_PASSWORD}"
      SITE_EMAIL_ALIAS: "${SITE_EMAIL_ALIAS}"
      SITE_IP: "${SITE_IP}"
      STRIPE_SECRET_KEY: "${STRIPE_SECRET_KEY}"
      STRIPE_WEBHOOK_SECRET: "${STRIPE_WEBHOOK_SECRET}"
      API_URL: "${API_URL}"
      TWILIO_ACCOUNT_SID: "${TWILIO_ACCOUNT_SID}"
      TWILIO_AUTH_TOKEN: "${TWILIO_AUTH_TOKEN}"
      TWILIO_PHONE_NUMBER: "${TWILIO_PHONE_NUMBER}"
      UI_URL: "${UI_URL}"
      WORKER_ID: "${WORKER_ID}"
    ports:
      - ${PORT_API:-5329}:${PORT_API:-5329}
      - "9229:9229" # For debugger
    networks:
      - app
    volumes:
      - ./packages/server:${PROJECT_DIR:-/srv/app}/packages/server:z
      - ./packages/shared:${PROJECT_DIR:-/srv/app}/packages/shared:z
      - ./data/logs:${PROJECT_DIR:-/srv/app}/data/logs:z
      - ./data/uploads:${PROJECT_DIR:-/srv/app}/data/uploads:z
      - ./packages/server/src/db/migrations:${PROJECT_DIR:-/srv/app}/packages/server/src/db/migrations
      - ./scripts:${PROJECT_DIR:-/srv/app}/scripts:z
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "node -e \"require('http').request({hostname: 'localhost', port: process.env.PORT_API || 5329, path: '/healthcheck'}, res => { if (res.statusCode === 200) { process.exit(0) } else { process.exit(1) } }).on('error', err => { process.exit(1) }).end()\"" ]
      start_period: 90s
      interval: 20s
      timeout: 5s
      retries: 15
    command: /bin/sh -c "${PROJECT_DIR:-/srv/app}/scripts/package/server/start.sh"
  jobs:
    build:
      context: .
      dockerfile: ./Dockerfile
      target: jobs
      args:
        PROJECT_DIR: "${PROJECT_DIR:-/srv/app}"
    container_name: jobs
    image: jobs:dev
    restart: always
    environment:
      NODE_ENV: "development"
      ADMIN_WALLET: "${ADMIN_WALLET}"
      ADMIN_PASSWORD: "${ADMIN_PASSWORD}"
      AWS_ACCESS_KEY_ID: "${AWS_ACCESS_KEY_ID}"
      AWS_SECRET_ACCESS_KEY: "${AWS_SECRET_ACCESS_KEY}"
      VALYXA_PASSWORD: "${VALYXA_PASSWORD}"
      PROJECT_DIR: "${PROJECT_DIR:-/srv/app}"
      VITE_SERVER_LOCATION: "${SERVER_LOCATION}"
      VITE_PORT_API: ${PORT_API:-5329}
      REDIS_URL: "${REDIS_URL}"
      DB_URL: "${DB_URL}"
      JWT_PRIV: "${JWT_PRIV}"
      JWT_PUB: "${JWT_PUB}"
      EXTERNAL_SITE_KEY: "${EXTERNAL_SITE_KEY}"
      OPENAI_API_KEY: "${OPENAI_API_KEY}"
      ANTHROPIC_API_KEY: "${ANTHROPIC_API_KEY}"
      MISTRAL_API_KEY: "${MISTRAL_API_KEY}"
      CREATE_MOCK_DATA: "${CREATE_MOCK_DATA}"
      SITE_EMAIL_FROM: "${SITE_EMAIL_FROM}"
      VAPID_PUBLIC_KEY: "${VAPID_PUBLIC_KEY}"
      VAPID_PRIVATE_KEY: "${VAPID_PRIVATE_KEY}"
      SITE_EMAIL_USERNAME: "${SITE_EMAIL_USERNAME}"
      SITE_EMAIL_PASSWORD: "${SITE_EMAIL_PASSWORD}"
      SITE_EMAIL_ALIAS: "${SITE_EMAIL_ALIAS}"
      SITE_IP: "${SITE_IP}"
      STRIPE_SECRET_KEY: "${STRIPE_SECRET_KEY}"
      STRIPE_WEBHOOK_SECRET: "${STRIPE_WEBHOOK_SECRET}"
      API_URL: "${API_URL}"
      TWILIO_ACCOUNT_SID: "${TWILIO_ACCOUNT_SID}"
      TWILIO_AUTH_TOKEN: "${TWILIO_AUTH_TOKEN}"
      TWILIO_PHONE_NUMBER: "${TWILIO_PHONE_NUMBER}"
      UI_URL: "${UI_URL}"
    ports:
      - "9230:9230" # For debugger
    networks:
      - app
    volumes:
      - ./packages/jobs:${PROJECT_DIR:-/srv/app}/packages/jobs:z
      - ./packages/server:${PROJECT_DIR:-/srv/app}/packages/server:z
      - ./packages/shared:${PROJECT_DIR:-/srv/app}/packages/shared:z
      - ./packages/ui/dist:${PROJECT_DIR:-/srv/app}/packages/ui/dist:z
      - ./scripts:${PROJECT_DIR:-/srv/app}/scripts:z
      - ./data/logs:${PROJECT_DIR:-/srv/app}/data/logs:z
    depends_on:
      server:
        condition: service_healthy
    command: /bin/sh -c "${PROJECT_DIR:-/srv/app}/scripts/package/jobs/start.sh"
  postgres:
    image: pgvector/pgvector:pg15 
    restart: always
    container_name: postgres
    environment:
      POSTGRES_PASSWORD: "${DB_PASSWORD}"
      POSTGRES_USER: "${DB_USER:-site}"
      PROJECT_DIR: "${PROJECT_DIR:-/srv/app}"
      PGPORT: "${PORT_DB:-5432}"
    expose:
      - ${PORT_DB:-5432}
    networks:
      - app
    volumes:
      - ./data/postgres-dev:/var/lib/postgresql/data
      - ./packages/postgres/entrypoint/run-postgres.sh:/usr/local/bin/run-postgres.sh:ro
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DB_USER:-site} && psql -U ${DB_USER:-site} -d postgres -c 'SELECT 1'" ]
      interval: 10s
      timeout: 5s
      retries: 5
    entrypoint: ["/usr/local/bin/run-postgres.sh"]
  redis:
    image: redis:7.4.0-alpine
    container_name: redis
    restart: always
    environment:
      REDIS_PASSWORD: "${REDIS_PASSWORD}"
      PROJECT_DIR: "${PROJECT_DIR:-/srv/app}"
    networks:
      - app
    volumes:
      - ./data/redis:${PROJECT_DIR:-/srv/app}/data/redis:z
      - ./scripts:${PROJECT_DIR:-/srv/app}/scripts
    expose:
      - ${PORT_REDIS:-6379}
    command: /bin/sh -c "${PROJECT_DIR:-/srv/app}/scripts/package/redis/start.sh"
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5
  # Used to view the database. Open http://localhost:8080
  adminer:
    image: ghcr.io/jeliebig/adminer-autologin
    container_name: adminer
    restart: always
    environment:
      ADMINER_PLUGINS: login-env-vars
      ADMINER_DRIVER: pgsql
      ADMINER_SERVER: postgres
      ADMINER_USERNAME: "${DB_USER:-site}"
      ADMINER_PASSWORD: "${DB_PASSWORD}"
      ADMINER_DB: "${DB_NAME}"
    networks:
      - app
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - 8080:8080
    command: /bin/sh -c "exec php -S [::]:8080 -t /var/www/html/"
  # # Service for NSFW detection
  # nsfw-detector:
  #   image: steelcityamir/safe-content-ai:latest
  #   container_name: nsfw-detector
  #   restart: always
  #   networks:
  #     - app
  #   expose:
  #     - 8000 # Expose port 8000 internally to the app network
  #   # GPU resources are recommended for this container for performance.
  #   # Configuration depends on your Docker setup (e.g., deploy.resources.reservations.devices)
  #   # deploy:
  #   #   resources:
  #   #     reservations:
  #   #       devices:
  #   #         - driver: nvidia
  #   #           count: 1
  #   #           capabilities: [gpu]
  #   healthcheck:
  #     # Basic TCP check as the service doesn't have a dedicated health endpoint
  #     test: ["CMD", "nc", "-z", "localhost", "8000"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3
  #     start_period: 60s # Give it time to download/load the model

networks:
  app:
