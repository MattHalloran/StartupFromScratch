generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["postgresqlExtensions"]
}

datasource db {
    provider   = "postgresql"
    url        = env("DB_URL")
    extensions = [pgvector(map: "vector"), citext(map: "citext")]
}

model award {
    id              BigInt    @id @db.BigInt
    createdAt       DateTime  @default(now()) @db.Timestamptz(6)
    updatedAt       DateTime  @updatedAt @db.Timestamptz(6)
    tierCompletedAt DateTime? @db.Timestamptz(6)
    category        String    @db.VarChar(128)
    progress        Int       @default(0)
    userId          BigInt    @db.BigInt
    user            user?     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([userId, category], name: "award_userId_category_unique")
    @@index([userId], name: "idx_award_userId")
}

model api_key {
    id          BigInt    @id @db.BigInt
    createdAt   DateTime  @default(now()) @db.Timestamptz(6)
    updatedAt   DateTime  @updatedAt @db.Timestamptz(6)
    creditsUsed BigInt    @default(0)
    disabledAt  DateTime? @db.Timestamptz(6)
    key         String    @unique @db.VarChar(255)
    limitHard   BigInt    @default(25000000000)
    limitSoft   BigInt?   @default(25000000000)
    name        String    @db.VarChar(128)
    permissions Json?     @default("{}")
    stopAtLimit Boolean   @default(true)
    teamId      BigInt?   @db.BigInt
    userId      BigInt?   @db.BigInt
    team        team?     @relation(fields: [teamId], references: [id], onDelete: Cascade)
    user        user?     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId], name: "idx_api_key_userId")
    @@index([teamId], name: "idx_api_key_teamId")
}

model api_key_external {
    id         BigInt    @id @db.BigInt
    createdAt  DateTime  @default(now()) @db.Timestamptz(6)
    updatedAt  DateTime  @updatedAt @db.Timestamptz(6)
    key        String    @db.VarChar(255)
    disabledAt DateTime? @db.Timestamptz(6)
    name       String    @db.VarChar(128)
    service    String    @db.VarChar(128)
    teamId     BigInt?   @db.BigInt
    userId     BigInt?   @db.BigInt
    team       team?     @relation(fields: [teamId], references: [id], onDelete: Cascade)
    user       user?     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([userId, service, name], name: "api_key_external_userId_service_name_unique")
    @@index([userId], name: "idx_api_key_external_userId")
    @@index([teamId], name: "idx_api_key_external_teamId")
}

model bookmark {
    id         BigInt         @id @db.BigInt
    createdAt  DateTime       @default(now()) @db.Timestamptz(6)
    updatedAt  DateTime       @updatedAt @db.Timestamptz(6)
    listId     BigInt?        @db.BigInt
    resourceId BigInt?        @db.BigInt
    commentId  BigInt?        @db.BigInt
    issueId    BigInt?        @db.BigInt
    tagId      BigInt?        @db.BigInt
    teamId     BigInt?        @db.BigInt
    userId     BigInt?        @db.BigInt
    list       bookmark_list? @relation("bookmark_list", fields: [listId], references: [id], onDelete: Cascade)
    resource   resource?      @relation("bookmark_resource", fields: [resourceId], references: [id], onDelete: Cascade)
    comment    comment?       @relation("bookmark_comment", fields: [commentId], references: [id], onDelete: Cascade)
    issue      issue?         @relation("bookmark_issue", fields: [issueId], references: [id], onDelete: Cascade)
    tag        tag?           @relation("bookmark_tag", fields: [tagId], references: [id], onDelete: Cascade)
    team       team?          @relation("bookmark_team", fields: [teamId], references: [id], onDelete: Cascade)
    user       user?          @relation("bookmark_user", fields: [userId], references: [id], onDelete: Cascade)

    @@index([listId, createdAt], name: "idx_bookmark_listId_createdAt")
    @@index([commentId, createdAt], name: "idx_bookmark_commentId_createdAt")
    @@index([issueId, createdAt], name: "idx_bookmark_issueId_createdAt")
    @@index([resourceId, createdAt], name: "idx_bookmark_resourceId_createdAt")
    @@index([tagId, createdAt], name: "idx_bookmark_tagId_createdAt")
    @@index([teamId, createdAt], name: "idx_bookmark_teamId_createdAt")
    @@index([userId, createdAt], name: "idx_bookmark_userId_createdAt")
}

model bookmark_list {
    id        BigInt     @id @db.BigInt
    createdAt DateTime   @default(now()) @db.Timestamptz(6)
    updatedAt DateTime   @updatedAt @db.Timestamptz(6)
    label     String     @db.VarChar(128)
    userId    BigInt     @db.BigInt
    bookmarks bookmark[] @relation("bookmark_list")
    user      user       @relation("bookmark_list_user", fields: [userId], references: [id], onDelete: Cascade)

    @@unique([label, userId], name: "bookmark_list_label_userId_unique")
    @@index([userId], name: "idx_bookmark_list_userId")
}

model chat {
    id                     BigInt                      @id @db.BigInt
    publicId               String                      @unique @db.VarChar(12)
    createdAt              DateTime                    @default(now()) @db.Timestamptz(6)
    updatedAt              DateTime                    @updatedAt @db.Timestamptz(6)
    isPrivate              Boolean                     @default(true)
    openToAnyoneWithInvite Boolean                     @default(false)
    creatorId              BigInt?                     @db.BigInt
    teamId                 BigInt?                     @db.BigInt
    creator                user?                       @relation(fields: [creatorId], references: [id], onDelete: SetNull)
    team                   team?                       @relation(fields: [teamId], references: [id], onDelete: Cascade)
    messages               chat_message[]
    participants           chat_participants[]
    invites                chat_invite[]
    translations           chat_translation[]
    subscriptions          notification_subscription[]

    @@index([publicId], name: "idx_chat_publicId")
    @@index([creatorId, createdAt], name: "idx_chat_creatorId_createdAt")
    @@index([creatorId, updatedAt], name: "idx_chat_creatorId_updatedAt")
    @@index([teamId, createdAt], name: "idx_chat_teamId_createdAt")
    @@index([teamId, updatedAt], name: "idx_chat_teamId_updatedAt")
}

model chat_translation {
    id                 BigInt                      @id @db.BigInt
    embedding          Unsupported("vector(768)")?
    embeddingExpiredAt DateTime?                   @default(now()) @db.Timestamptz(6)
    chatId             BigInt                      @db.BigInt
    chat               chat                        @relation(fields: [chatId], references: [id], onDelete: Cascade)
    language           String                      @db.VarChar(3)
    name               String?                     @db.VarChar(128)
    description        String?                     @db.VarChar(2048)

    @@unique([chatId, language], name: "chat_translation_chatid_language_unique")
    @@index([chatId], name: "idx_chat_translation_chatId")
}

model chat_message {
    id                BigInt             @id @db.BigInt
    createdAt         DateTime           @default(now()) @db.Timestamptz(6)
    updatedAt         DateTime           @updatedAt @db.Timestamptz(6)
    language          String             @db.VarChar(3)
    metadata          String?            @db.VarChar(4096)
    text              String             @db.VarChar(32768)
    score             Int                @default(0)
    sequence          Int                @default(autoincrement())
    versionIndex      Int                @default(0)
    parentId          BigInt?            @db.BigInt
    userId            BigInt?            @db.BigInt
    chatId            BigInt?            @db.BigInt
    chat              chat?              @relation(fields: [chatId], references: [id], onDelete: Cascade)
    parent            chat_message?      @relation("chat_message_parent", fields: [parentId], references: [id], onDelete: SetNull)
    children          chat_message[]     @relation("chat_message_parent")
    user              user?              @relation("chat_message_user", fields: [userId], references: [id], onDelete: SetNull)
    reactions         reaction[]         @relation("reaction_chat_message")
    reactionSummaries reaction_summary[] @relation("reaction_summary_chat_message")
    reports           report[]

    @@index([chatId, createdAt], name: "idx_chat_message_chatId_createdAt")
}

model chat_participants {
    id        BigInt   @id @db.BigInt
    createdAt DateTime @default(now()) @db.Timestamptz(6)
    updatedAt DateTime @updatedAt @db.Timestamptz(6)
    hasUnread Boolean  @default(true)
    chatId    BigInt   @db.BigInt
    userId    BigInt   @db.BigInt
    chat      chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
    user      user     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([chatId, userId], name: "chat_participants_chatid_userid_unique")
    @@index([chatId], name: "idx_chat_participants_chatId")
    @@index([userId], name: "idx_chat_participants_userId")
}

model chat_invite {
    id        BigInt       @id @db.BigInt
    createdAt DateTime     @default(now()) @db.Timestamptz(6)
    updatedAt DateTime     @updatedAt @db.Timestamptz(6)
    status    InviteStatus @default(Pending)
    message   String?      @db.VarChar(4096)
    chatId    BigInt       @db.BigInt
    userId    BigInt       @db.BigInt
    chat      chat         @relation(fields: [chatId], references: [id], onDelete: Cascade)
    user      user         @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([chatId, userId], name: "chat_invite_chatid_userid_unique")
    @@index([chatId], name: "idx_chat_invite_chatId")
    @@index([userId], name: "idx_chat_invite_userId")
}

model comment {
    id                BigInt                      @id @db.BigInt
    createdAt         DateTime                    @default(now()) @db.Timestamptz(6)
    updatedAt         DateTime                    @updatedAt @db.Timestamptz(6)
    ownedByTeamId     BigInt?                     @db.BigInt
    ownedByUserId     BigInt?                     @db.BigInt
    resourceVersionId BigInt?                     @db.BigInt
    issueId           BigInt?                     @db.BigInt
    parentId          BigInt?                     @db.BigInt
    pullRequestId     BigInt?                     @db.BigInt
    score             Int                         @default(0)
    bookmarks         Int                         @default(0)
    resourceVersion   resource_version?           @relation(fields: [resourceVersionId], references: [id], onDelete: Cascade)
    issue             issue?                      @relation(fields: [issueId], references: [id], onDelete: Cascade)
    parent            comment?                    @relation("comment_parent", fields: [parentId], references: [id], onDelete: Cascade)
    pullRequest       pull_request?               @relation(fields: [pullRequestId], references: [id], onDelete: Cascade)
    ownedByTeam       team?                       @relation("comment_ownedByTeam", fields: [ownedByTeamId], references: [id], onDelete: SetNull)
    ownedByUser       user?                       @relation("comment_ownedByUser", fields: [ownedByUserId], references: [id], onDelete: SetNull)
    translations      comment_translation[]
    reports           report[]
    bookmarkedBy      bookmark[]                  @relation("bookmark_comment")
    reactions         reaction[]                  @relation("reaction_comment")
    reactionSummaries reaction_summary[]          @relation("reaction_summary_comment")
    parents           comment[]                   @relation("comment_parent")
    subscriptions     notification_subscription[]

    @@index([issueId, createdAt], name: "idx_comment_issueId_createdAt")
    @@index([ownedByTeamId, createdAt], name: "idx_comment_ownedByTeamId_createdAt")
    @@index([ownedByUserId, createdAt], name: "idx_comment_ownedByUserId_createdAt")
    @@index([parentId], name: "idx_comment_parentId")
    @@index([pullRequestId, createdAt], name: "idx_comment_pullRequestId_createdAt")
    @@index([resourceVersionId, createdAt], name: "idx_comment_resourceVersionId_createdAt")
    @@index([score], name: "idx_comment_score")
}

model comment_translation {
    id        BigInt  @id @db.BigInt
    text      String  @db.VarChar(32768)
    language  String  @db.VarChar(3)
    commentId BigInt  @db.BigInt
    comment   comment @relation(fields: [commentId], references: [id], onDelete: Cascade)

    @@unique([commentId, language], name: "comment_translation_commentId_language_unique")
    @@index([commentId], name: "idx_comment_translation_commentId")
}

model email {
    id                                 BigInt    @id @db.BigInt
    createdAt                          DateTime  @default(now()) @db.Timestamptz(6)
    updatedAt                          DateTime  @updatedAt @db.Timestamptz(6)
    emailAddress                       String    @unique @db.Citext
    verifiedAt                         DateTime? @db.Timestamptz(6)
    verificationCode                   String?   @db.VarChar(256)
    lastVerificationCodeRequestAttempt DateTime? @db.Timestamptz(6)
    teamId                             BigInt?   @db.BigInt
    userId                             BigInt?   @db.BigInt
    team                               team?     @relation(fields: [teamId], references: [id], onDelete: Cascade)
    user                               user?     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([teamId], name: "idx_email_teamId")
    @@index([userId], name: "idx_email_userId")
}

model issue {
    id                BigInt                      @id @db.BigInt
    publicId          String                      @unique @db.VarChar(12)
    status            IssueStatus                 @default(Open)
    createdAt         DateTime                    @default(now()) @db.Timestamptz(6)
    updatedAt         DateTime                    @updatedAt @db.Timestamptz(6)
    closedAt          DateTime?                   @db.Timestamptz(6)
    score             Int                         @default(0)
    bookmarks         Int                         @default(0)
    views             Int                         @default(0)
    resourceId        BigInt?                     @db.BigInt
    teamId            BigInt?                     @db.BigInt
    closedById        BigInt?                     @db.BigInt
    createdById       BigInt?                     @db.BigInt
    resource          resource?                   @relation(fields: [resourceId], references: [id], onDelete: Cascade)
    closedBy          user?                       @relation("issue_closedBy", fields: [closedById], references: [id], onDelete: Cascade)
    createdBy         user?                       @relation("issue_createdBy", fields: [createdById], references: [id], onDelete: Cascade)
    comments          comment[]
    reports           report[]
    team              team?                       @relation(fields: [teamId], references: [id], onDelete: Cascade)
    translations      issue_translation[]
    reactions         reaction[]                  @relation("reaction_issue")
    reactionSummaries reaction_summary[]          @relation("reaction_summary_issue")
    bookmarkedBy      bookmark[]                  @relation("bookmark_issue")
    viewedBy          view[]                      @relation("view_issue")
    subscriptions     notification_subscription[]

    @@index([publicId], name: "idx_issue_publicId")
    @@index([teamId, createdAt], name: "idx_issue_teamId_createdAt")
    @@index([teamId, updatedAt], name: "idx_issue_teamId_updatedAt")
    @@index([closedById, createdAt], name: "idx_issue_closedById_createdAt")
    @@index([closedById, updatedAt], name: "idx_issue_closedById_updatedAt")
    @@index([createdById, createdAt], name: "idx_issue_createdById_createdAt")
    @@index([createdById, updatedAt], name: "idx_issue_createdById_updatedAt")
    @@index([resourceId, createdAt], name: "idx_issue_resourceId_createdAt")
    @@index([resourceId, updatedAt], name: "idx_issue_resourceId_updatedAt")
}

model issue_translation {
    id                 BigInt                      @id @db.BigInt
    embedding          Unsupported("vector(768)")?
    embeddingExpiredAt DateTime?                   @default(now()) @db.Timestamptz(6)
    description        String?                     @db.VarChar(2048)
    name               String?                     @db.VarChar(128)
    issueId            BigInt                      @db.BigInt
    language           String                      @db.VarChar(3)
    issue              issue                       @relation(fields: [issueId], references: [id], onDelete: Cascade)

    @@unique([issueId, language], name: "issue_translation_issueId_language_unique")
    @@index([issueId], name: "idx_issue_translation_issueId")
}

model meeting {
    id                     BigInt                      @id @db.BigInt
    publicId               String                      @unique @db.VarChar(12)
    createdAt              DateTime                    @default(now()) @db.Timestamptz(6)
    updatedAt              DateTime                    @updatedAt @db.Timestamptz(6)
    inviteId               BigInt?                     @db.BigInt
    scheduleId             BigInt?                     @db.BigInt
    openToAnyoneWithInvite Boolean                     @default(false)
    showOnTeamProfile      Boolean                     @default(false)
    teamId                 BigInt                      @db.BigInt
    team                   team                        @relation(fields: [teamId], references: [id], onDelete: Cascade)
    attendees              meeting_attendees[]
    invites                meeting_invite[]
    translations           meeting_translation[]
    schedule               schedule?                   @relation("meeting_schedule", fields: [scheduleId], references: [id], onDelete: SetNull)
    subscriptions          notification_subscription[]

    @@index([inviteId], name: "idx_meeting_inviteId")
    @@index([publicId], name: "idx_meeting_publicId")
    @@index([scheduleId], name: "idx_meeting_scheduleId")
    @@index([teamId, createdAt], name: "idx_meeting_teamId_createdAt")
    @@index([teamId, updatedAt], name: "idx_meeting_teamId_updatedAt")
}

model meeting_attendees {
    id        BigInt  @id @db.BigInt
    meetingId BigInt  @db.BigInt
    userId    BigInt  @db.BigInt
    meeting   meeting @relation(fields: [meetingId], references: [id], onDelete: Cascade)
    user      user    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([meetingId, userId], name: "meeting_attendees_meetingid_userid_unique")
    @@index([meetingId], name: "idx_meeting_attendees_meetingId")
    @@index([userId], name: "idx_meeting_attendees_userId")
}

model meeting_invite {
    id        BigInt       @id @db.BigInt
    createdAt DateTime     @default(now()) @db.Timestamptz(6)
    updatedAt DateTime     @updatedAt @db.Timestamptz(6)
    status    InviteStatus @default(Pending)
    message   String?      @db.VarChar(4096)
    meetingId BigInt       @db.BigInt
    meeting   meeting      @relation(fields: [meetingId], references: [id], onDelete: Cascade)
    userId    BigInt       @db.BigInt
    user      user         @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([meetingId, userId], name: "meeting_invite_meetingid_userid_unique")
    @@index([meetingId], name: "idx_meeting_invite_meetingId")
    @@index([userId], name: "idx_meeting_invite_userId")
}

model meeting_translation {
    id                 BigInt                      @id @db.BigInt
    embedding          Unsupported("vector(768)")?
    embeddingExpiredAt DateTime?                   @default(now()) @db.Timestamptz(6)
    meetingId          BigInt                      @db.BigInt
    meeting            meeting                     @relation(fields: [meetingId], references: [id], onDelete: Cascade)
    language           String                      @db.VarChar(3)
    name               String?                     @db.VarChar(128)
    description        String?                     @db.VarChar(2048)
    link               String?                     @db.VarChar(2048)

    @@unique([meetingId, language], name: "meeting_translation_meetingid_language_unique")
    @@index([meetingId], name: "idx_meeting_translation_meetingId")
}

model notification {
    id          BigInt   @id @db.BigInt
    createdAt   DateTime @default(now()) @db.Timestamptz(6)
    updatedAt   DateTime @updatedAt @db.Timestamptz(6)
    category    String   @db.VarChar(64)
    isRead      Boolean  @default(false)
    title       String   @db.VarChar(128)
    description String?  @db.VarChar(2048)
    count       Int      @default(1)
    link        String?  @db.VarChar(2048)
    imgLink     String?  @db.VarChar(2048)
    userId      BigInt   @db.BigInt
    user        user     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId, createdAt], name: "idx_notification_userId_createdAt")
    @@index([userId, isRead], name: "idx_notification_userId_isRead")
    @@index([userId, category], name: "idx_notification_userId_category")
}

model notification_subscription {
    id            BigInt        @id @db.BigInt
    createdAt     DateTime      @default(now()) @db.Timestamptz(6)
    context       String?       @db.VarChar(2048)
    silent        Boolean       @default(false)
    resourceId    BigInt?       @db.BigInt
    chatId        BigInt?       @db.BigInt
    commentId     BigInt?       @db.BigInt
    issueId       BigInt?       @db.BigInt
    meetingId     BigInt?       @db.BigInt
    pullRequestId BigInt?       @db.BigInt
    reportId      BigInt?       @db.BigInt
    scheduleId    BigInt?       @db.BigInt
    subscriberId  BigInt        @db.BigInt
    teamId        BigInt?       @db.BigInt
    resource      resource?     @relation(fields: [resourceId], references: [id], onDelete: Cascade)
    chat          chat?         @relation(fields: [chatId], references: [id], onDelete: Cascade)
    comment       comment?      @relation(fields: [commentId], references: [id], onDelete: Cascade)
    issue         issue?        @relation(fields: [issueId], references: [id], onDelete: Cascade)
    meeting       meeting?      @relation(fields: [meetingId], references: [id], onDelete: Cascade)
    pullRequest   pull_request? @relation(fields: [pullRequestId], references: [id], onDelete: Cascade)
    report        report?       @relation(fields: [reportId], references: [id], onDelete: Cascade)
    schedule      schedule?     @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
    team          team?         @relation(fields: [teamId], references: [id], onDelete: Cascade)
    subscriber    user          @relation(fields: [subscriberId], references: [id], onDelete: Cascade)

    @@index([chatId], name: "idx_notification_subscription_chatId")
    @@index([commentId], name: "idx_notification_subscription_commentId")
    @@index([issueId], name: "idx_notification_subscription_issueId")
    @@index([meetingId], name: "idx_notification_subscription_meetingId")
    @@index([pullRequestId], name: "idx_notification_subscription_pullRequestId")
    @@index([reportId], name: "idx_notification_subscription_reportId")
    @@index([resourceId], name: "idx_notification_subscription_resourceId")
    @@index([scheduleId], name: "idx_notification_subscription_scheduleId")
    @@index([subscriberId], name: "idx_notification_subscription_subscriberId")
    @@index([teamId], name: "idx_notification_subscription_teamId")
}

model push_device {
    id       BigInt    @id @db.BigInt
    endpoint String    @unique @db.VarChar(1024)
    p256dh   String    @db.VarChar(1024)
    auth     String    @db.VarChar(1024)
    expires  DateTime? @db.Timestamptz(6)
    name     String?   @db.VarChar(128)
    userId   BigInt    @db.BigInt
    user     user?     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId], name: "idx_push_device_userId")
}

model team {
    id                 BigInt                      @id @db.BigInt
    publicId           String                      @unique @db.VarChar(12)
    createdAt          DateTime                    @default(now()) @db.Timestamptz(6)
    updatedAt          DateTime                    @updatedAt @db.Timestamptz(6)
    bannerImage        String?                     @db.VarChar(2048)
    config             Json?                       @default("{}")
    handle             String?                     @unique @db.Citext
    isOpenToNewMembers Boolean                     @default(false)
    isPrivate          Boolean                     @default(false)
    languages          String[]                    @default([])
    permissions        Json?                       @default("{}")
    profileImage       String?                     @db.VarChar(2048)
    bookmarks          Int                         @default(0)
    views              Int                         @default(0)
    parentId           BigInt?                     @db.BigInt
    premiumId          BigInt?                     @unique @db.BigInt
    createdById        BigInt?                     @db.BigInt
    stripeCustomerId   String?                     @unique @db.VarChar(255)
    createdBy          user?                       @relation("team_createdBy", fields: [createdById], references: [id], onDelete: SetNull)
    chats              chat[]
    emails             email[]
    issues             issue[]
    apiKeys            api_key[]
    apiKeysExternal    api_key_external[]
    comments           comment[]                   @relation("comment_ownedByTeam")
    meetings           meeting[]
    paymentHistory     payment[]
    phones             phone[]
    premium            premium?                    @relation(fields: [premiumId], references: [id], onDelete: SetNull)
    tags               team_tag[]
    translations       team_translation[]
    members            member[]
    memberInvites      member_invite[]
    reports            report[]
    resources          resource[]                  @relation("resource_ownedByTeam")
    runs               run[]                       @relation("run_team")
    bookmarkedBy       bookmark[]                  @relation("bookmark_team")
    viewedBy           view[]                      @relation("view_team")
    wallets            wallet[]
    transfersIncoming  transfer[]                  @relation("transfer_to_team")
    transfersOutgoing  transfer[]                  @relation("transfer_from_team")
    stats              stats_team[]
    subscriptions      notification_subscription[]
    parent             team?                       @relation("team_version_fork", fields: [parentId], references: [id], onDelete: SetNull)
    forks              team[]                      @relation("team_version_fork")

    @@index([createdById], name: "idx_team_createdById")
    @@index([parentId], name: "idx_team_parentId")
    @@index([publicId], name: "idx_team_publicId")
}

model team_translation {
    id                 BigInt                      @id @db.BigInt
    embedding          Unsupported("vector(768)")?
    embeddingExpiredAt DateTime?                   @default(now()) @db.Timestamptz(6)
    bio                String?                     @db.VarChar(2048)
    name               String                      @db.VarChar(128)
    language           String                      @db.VarChar(3)
    teamId             BigInt                      @db.BigInt
    team               team                        @relation(fields: [teamId], references: [id], onDelete: Cascade)

    @@unique([teamId, language], name: "team_translation_teamId_language_unique")
    @@index([teamId], name: "idx_team_translation_teamId")
}

model team_tag {
    id       BigInt @id @db.BigInt
    taggedId BigInt @db.BigInt
    tagTag   String @db.VarChar(128)
    tag      tag    @relation(fields: [tagTag], references: [tag], onDelete: Cascade)
    tagged   team   @relation(fields: [taggedId], references: [id], onDelete: Cascade)

    @@unique([taggedId, tagTag], name: "team_tag_taggedId_tagTag_unique")
    @@index([taggedId], name: "idx_team_tag_taggedId")
}

model member {
    id          BigInt   @id @db.BigInt
    publicId    String   @unique @db.VarChar(12)
    createdAt   DateTime @default(now()) @db.Timestamptz(6)
    updatedAt   DateTime @updatedAt @db.Timestamptz(6)
    isAdmin     Boolean  @default(false)
    permissions Json?    @default("{}")
    teamId      BigInt   @db.BigInt
    userId      BigInt   @db.BigInt
    team        team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
    user        user     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([teamId, userId], name: "member_teamid_userid_unique")
    @@index([publicId], name: "idx_member_publicId")
    @@index([teamId, createdAt], name: "idx_member_teamId_createdAt")
    @@index([teamId, updatedAt], name: "idx_member_teamId_updatedAt")
    @@index([userId], name: "idx_member_userId")
}

model member_invite {
    id                  BigInt       @id @db.BigInt
    createdAt           DateTime     @default(now()) @db.Timestamptz(6)
    updatedAt           DateTime     @updatedAt @db.Timestamptz(6)
    status              InviteStatus @default(Pending)
    message             String?      @db.VarChar(4096)
    willBeAdmin         Boolean      @default(false)
    willHavePermissions Json?        @default("{}")
    teamId              BigInt       @db.BigInt
    userId              BigInt       @db.BigInt
    team                team         @relation(fields: [teamId], references: [id], onDelete: Cascade)
    user                user         @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([userId, teamId], name: "member_invite_userid_teamid_unique")
    @@index([userId], name: "idx_member_invite_userId")
    @@index([teamId], name: "idx_member_invite_teamId")
}

model phone {
    id                                 BigInt    @id @db.BigInt
    phoneNumber                        String    @unique @db.VarChar(16)
    verifiedAt                         DateTime? @db.Timestamptz(6)
    verificationCode                   String?   @db.VarChar(16)
    lastVerificationCodeRequestAttempt DateTime? @db.Timestamptz(6)
    teamId                             BigInt?   @db.BigInt
    userId                             BigInt?   @db.BigInt
    team                               team?     @relation(fields: [teamId], references: [id], onDelete: Cascade)
    user                               user?     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId], name: "idx_phone_userId")
    @@index([teamId], name: "idx_phone_teamId")
}

model payment {
    id            BigInt        @id @db.BigInt
    createdAt     DateTime      @default(now()) @db.Timestamptz(6)
    updatedAt     DateTime      @updatedAt @db.Timestamptz(6)
    amount        Int
    checkoutId    String        @db.VarChar(255)
    currency      String        @db.VarChar(255)
    description   String        @db.VarChar(2048)
    paymentMethod String        @db.VarChar(255)
    paymentType   PaymentType   @default(PremiumMonthly)
    status        PaymentStatus @default(Pending)
    teamId        BigInt?       @db.BigInt
    userId        BigInt?       @db.BigInt
    team          team?         @relation(fields: [teamId], references: [id], onDelete: SetNull)
    user          user?         @relation(fields: [userId], references: [id], onDelete: SetNull)

    @@index([teamId], name: "idx_payment_teamId")
    @@index([userId], name: "idx_payment_userId")
}

model premium {
    id                  BigInt    @id @db.BigInt
    credits             BigInt    @default(0)
    customPlan          String?   @db.VarChar(2048)
    enabledAt           DateTime? @db.Timestamptz(6)
    expiresAt           DateTime? @db.Timestamptz(6)
    receivedFreeTrialAt DateTime? @db.Timestamptz(6)
    team                team?
    user                user?
}

model pull_request {
    id                  BigInt                      @id @db.BigInt
    publicId            String                      @unique @db.VarChar(12)
    createdAt           DateTime                    @default(now()) @db.Timestamptz(6)
    updatedAt           DateTime                    @updatedAt @db.Timestamptz(6)
    status              PullRequestStatus           @default(Open)
    closedAt            DateTime?                   @db.Timestamptz(6)
    createdById         BigInt?                     @db.BigInt
    toResourceId        BigInt?                     @db.BigInt
    createdBy           user?                       @relation("pull_request_createdBy", fields: [createdById], references: [id], onDelete: SetNull)
    toResource          resource?                   @relation(fields: [toResourceId], references: [id], onDelete: Cascade)
    fromResourceVersion resource_version?           @relation("pull_request_from_resource_version")
    comments            comment[]
    subscriptions       notification_subscription[]
    translations        pull_request_translation[]

    @@index([publicId], name: "idx_pull_request_publicId")
    @@index([createdById, createdAt], name: "idx_pull_request_createdById_createdAt")
    @@index([toResourceId, createdAt], name: "idx_pull_request_toResourceId_createdAt")
}

model pull_request_translation {
    id            BigInt       @id @db.BigInt
    text          String       @db.VarChar(32768)
    language      String       @db.VarChar(3)
    pullRequestId BigInt       @db.BigInt
    pullRequest   pull_request @relation(fields: [pullRequestId], references: [id], onDelete: Cascade)

    @@unique([pullRequestId, language], name: "pull_request_translation_pullRequestId_language_unique")
    @@index([pullRequestId], name: "idx_pull_request_translation_pullRequestId")
}

model reaction {
    id            BigInt        @id @db.BigInt
    createdAt     DateTime      @default(now()) @db.Timestamptz(6)
    updatedAt     DateTime      @updatedAt @db.Timestamptz(6)
    emoji         String        @db.VarChar(32)
    byId          BigInt        @db.BigInt
    resourceId    BigInt?       @db.BigInt
    chatMessageId BigInt?       @db.BigInt
    commentId     BigInt?       @db.BigInt
    issueId       BigInt?       @db.BigInt
    by            user          @relation("reaction_by", fields: [byId], references: [id], onDelete: Cascade)
    resource      resource?     @relation("reaction_resource", fields: [resourceId], references: [id], onDelete: Cascade)
    chatMessage   chat_message? @relation("reaction_chat_message", fields: [chatMessageId], references: [id], onDelete: Cascade)
    comment       comment?      @relation("reaction_comment", fields: [commentId], references: [id], onDelete: Cascade)
    issue         issue?        @relation("reaction_issue", fields: [issueId], references: [id], onDelete: Cascade)

    @@index([byId, createdAt], name: "idx_reaction_byId_createdAt")
    @@index([resourceId, createdAt], name: "idx_reaction_resourceId_createdAt")
    @@index([chatMessageId, createdAt], name: "idx_reaction_chatMessageId_createdAt")
    @@index([commentId, createdAt], name: "idx_reaction_commentId_createdAt")
    @@index([issueId, createdAt], name: "idx_reaction_issueId_createdAt")
}

model reaction_summary {
    id            BigInt        @id @db.BigInt
    createdAt     DateTime      @default(now()) @db.Timestamptz(6)
    updatedAt     DateTime      @updatedAt @db.Timestamptz(6)
    emoji         String        @db.VarChar(32)
    count         Int           @default(0)
    resourceId    BigInt?       @db.BigInt
    chatMessageId BigInt?       @db.BigInt
    commentId     BigInt?       @db.BigInt
    issueId       BigInt?       @db.BigInt
    resource      resource?     @relation("reaction_summary_resource", fields: [resourceId], references: [id], onDelete: Cascade)
    chatMessage   chat_message? @relation("reaction_summary_chat_message", fields: [chatMessageId], references: [id], onDelete: Cascade)
    comment       comment?      @relation("reaction_summary_comment", fields: [commentId], references: [id], onDelete: Cascade)
    issue         issue?        @relation("reaction_summary_issue", fields: [issueId], references: [id], onDelete: Cascade)

    @@unique([emoji, resourceId, chatMessageId, commentId, issueId], name: "reaction_summary_emoji_unique")
    @@index([resourceId, createdAt], name: "idx_reaction_summary_resourceId_createdAt")
    @@index([chatMessageId, createdAt], name: "idx_reaction_summary_chatMessageId_createdAt")
    @@index([commentId, createdAt], name: "idx_reaction_summary_commentId_createdAt")
    @@index([issueId, createdAt], name: "idx_reaction_summary_issueId_createdAt")
}

model reminder_list {
    id        BigInt     @id @db.BigInt
    createdAt DateTime   @default(now()) @db.Timestamptz(6)
    updatedAt DateTime   @updatedAt @db.Timestamptz(6)
    userId    BigInt     @db.BigInt
    reminders reminder[]
    user      user       @relation("reminder_list_user", fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId, createdAt], name: "idx_reminder_list_userId_createdAt")
}

model reminder {
    id                 BigInt                      @id @db.BigInt
    createdAt          DateTime                    @default(now()) @db.Timestamptz(6)
    updatedAt          DateTime                    @updatedAt @db.Timestamptz(6)
    completedAt        DateTime?                   @db.Timestamptz(6)
    dueDate            DateTime?                   @db.Timestamptz(6)
    embedding          Unsupported("vector(768)")?
    embeddingExpiredAt DateTime?                   @default(now()) @db.Timestamptz(6)
    name               String                      @db.VarChar(128)
    description        String?                     @db.VarChar(2048)
    index              Int
    reminderListId     BigInt                      @db.BigInt
    reminderItems      reminder_item[]
    reminderList       reminder_list               @relation(fields: [reminderListId], references: [id], onDelete: Cascade)

    @@index([reminderListId, createdAt], name: "idx_reminder_reminderListId_createdAt")
}

model reminder_item {
    id          BigInt    @id @db.BigInt
    createdAt   DateTime  @default(now()) @db.Timestamptz(6)
    updatedAt   DateTime  @updatedAt @db.Timestamptz(6)
    completedAt DateTime? @db.Timestamptz(6)
    dueDate     DateTime? @db.Timestamptz(6)
    name        String    @db.VarChar(128)
    description String?   @db.VarChar(2048)
    index       Int
    reminderId  BigInt    @db.BigInt
    reminder    reminder  @relation(fields: [reminderId], references: [id], onDelete: Cascade)

    @@index([reminderId], name: "idx_reminder_item_reminderId")
}

model report {
    id                BigInt                      @id @db.BigInt
    publicId          String                      @unique @db.VarChar(12)
    createdAt         DateTime                    @default(now()) @db.Timestamptz(6)
    updatedAt         DateTime                    @updatedAt @db.Timestamptz(6)
    reason            String                      @db.VarChar(128)
    details           String?                     @db.VarChar(8192)
    language          String                      @db.VarChar(3)
    status            ReportStatus
    resourceVersionId BigInt?                     @db.BigInt
    chatMessageId     BigInt?                     @db.BigInt
    commentId         BigInt?                     @db.BigInt
    issueId           BigInt?                     @db.BigInt
    tagId             BigInt?                     @db.BigInt
    teamId            BigInt?                     @db.BigInt
    userId            BigInt?                     @db.BigInt
    createdById       BigInt?                     @db.BigInt
    resourceVersion   resource_version?           @relation(fields: [resourceVersionId], references: [id], onDelete: Cascade)
    chatMessage       chat_message?               @relation(fields: [chatMessageId], references: [id], onDelete: Cascade)
    comment           comment?                    @relation(fields: [commentId], references: [id], onDelete: Cascade)
    issue             issue?                      @relation(fields: [issueId], references: [id], onDelete: Cascade)
    tag               tag?                        @relation(fields: [tagId], references: [id], onDelete: Cascade)
    team              team?                       @relation(fields: [teamId], references: [id], onDelete: Cascade)
    user              user?                       @relation("report_user", fields: [userId], references: [id], onDelete: Cascade)
    createdBy         user?                       @relation("report_createdBy", fields: [createdById], references: [id], onDelete: SetNull)
    responses         report_response[]
    subscriptions     notification_subscription[]

    @@index([publicId], name: "idx_report_publicId")
    @@index([createdById, createdAt], name: "idx_report_createdById_createdAt")
    @@index([resourceVersionId, createdAt], name: "idx_report_resourceVersionId_createdAt")
    @@index([chatMessageId, createdAt], name: "idx_report_chatMessageId_createdAt")
    @@index([commentId, createdAt], name: "idx_report_commentId_createdAt")
    @@index([issueId, createdAt], name: "idx_report_issueId_createdAt")
    @@index([tagId, createdAt], name: "idx_report_tagId_createdAt")
    @@index([teamId, createdAt], name: "idx_report_teamId_createdAt")
    @@index([userId, createdAt], name: "idx_report_userId_createdAt")
}

model report_response {
    id              BigInt                @id @db.BigInt
    createdAt       DateTime              @default(now()) @db.Timestamptz(6)
    updatedAt       DateTime              @updatedAt @db.Timestamptz(6)
    reportId        BigInt                @db.BigInt
    createdById     BigInt                @db.BigInt
    actionSuggested ReportSuggestedAction
    details         String?               @db.VarChar(8192)
    language        String?               @db.VarChar(3)
    report          report                @relation(fields: [reportId], references: [id], onDelete: Cascade)
    createdBy       user                  @relation("report_response_createdBy", fields: [createdById], references: [id], onDelete: Cascade)

    @@unique([reportId, createdById], name: "report_response_reportid_userid_unique")
    @@index([reportId, createdAt], name: "idx_report_response_reportId_createdAt")
    @@index([createdById, createdAt], name: "idx_report_response_createdById_createdAt")
}

model reputation_history {
    id        BigInt   @id @db.BigInt
    createdAt DateTime @default(now()) @db.Timestamptz(6)
    updatedAt DateTime @updatedAt @db.Timestamptz(6)
    amount    Int
    event     String   @db.VarChar(128)
    objectId1 BigInt?  @db.BigInt
    objectId2 BigInt?  @db.BigInt
    userId    BigInt   @db.BigInt
    user      user     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId, createdAt], name: "idx_reputation_history_userId_createdAt")
    @@index([userId, event], name: "idx_reputation_history_userId_event")
}

model resource {
    id                 BigInt    @id @db.BigInt
    publicId           String    @unique @db.VarChar(12)
    createdAt          DateTime  @default(now()) @db.Timestamptz(6)
    updatedAt          DateTime  @updatedAt @db.Timestamptz(6)
    resourceType       String    @db.VarChar(32)
    completedAt        DateTime? @db.Timestamptz(6)
    transferredAt      DateTime? @db.Timestamptz(6)
    hasCompleteVersion Boolean   @default(false)
    isDeleted          Boolean   @default(false)
    isPrivate          Boolean   @default(false)
    permissions        Json?     @default("{}")
    score              Int       @default(0)
    bookmarks          Int       @default(0)
    views              Int       @default(0)
    createdById        BigInt?   @db.BigInt
    ownedByTeamId      BigInt?   @db.BigInt
    ownedByUserId      BigInt?   @db.BigInt
    parentId           BigInt?   @db.BigInt

    // Relations
    createdBy   user?             @relation("resource_createdBy", fields: [createdById], references: [id], onDelete: SetNull)
    ownedByTeam team?             @relation("resource_ownedByTeam", fields: [ownedByTeamId], references: [id])
    ownedByUser user?             @relation("resource_ownedByUser", fields: [ownedByUserId], references: [id])
    parent      resource_version? @relation("resource_version_fork", fields: [parentId], references: [id], onDelete: SetNull)

    // Resource-specific searchable fields (minimal set)
    isInternal Boolean? // For routines

    // Child relations
    versions          resource_version[]
    tags              resource_tag[]
    issues            issue[]
    bookmarkedBy      bookmark[]                  @relation("bookmark_resource")
    viewedBy          view[]                      @relation("view_resource")
    reactions         reaction[]                  @relation("reaction_resource")
    reactionSummaries reaction_summary[]          @relation("reaction_summary_resource")
    pullRequests      pull_request[]
    subscriptions     notification_subscription[]
    transfers         transfer[]                  @relation("transfer_resource")
    stats             stats_resource[]

    @@index([publicId], name: "idx_resource_publicId")
    @@index([resourceType, createdAt, isDeleted, isInternal], name: "idx_resource_resourceType_createdAt_isDeleted_isInternal")
    @@index([resourceType, updatedAt, isDeleted, isInternal], name: "idx_resource_resourceType_updatedAt_isDeleted_isInternal")
    @@index([resourceType, score, isDeleted, isInternal], name: "idx_resource_resourceType_score_isDeleted_isInternal")
    @@index([resourceType, bookmarks, isDeleted, isInternal], name: "idx_resource_resourceType_bookmarks_isDeleted_isInternal")
    @@index([resourceType, views, isDeleted, isInternal], name: "idx_resource_resourceType_views_isDeleted_isInternal")
    @@index([createdById], name: "idx_resource_createdById")
    @@index([ownedByTeamId], name: "idx_resource_ownedByTeamId")
    @@index([ownedByUserId], name: "idx_resource_ownedByUserId")
    @@index([parentId], name: "idx_resource_parentId")
}

model resource_version {
    id                  BigInt    @id @db.BigInt
    publicId            String    @unique @db.VarChar(12)
    rootId              BigInt    @db.BigInt
    versionIndex        Int       @default(0)
    versionLabel        String    @default("1.0.0") @db.VarChar(16)
    createdAt           DateTime  @default(now()) @db.Timestamptz(6)
    updatedAt           DateTime  @updatedAt @db.Timestamptz(6)
    completedAt         DateTime? @db.Timestamptz(6)
    config              Json?     @default("{}")
    isComplete          Boolean   @default(false)
    isDeleted           Boolean   @default(false)
    isLatest            Boolean   @default(false)
    isLatestPublic      Boolean   @default(false)
    isPrivate           Boolean   @default(false)
    intendToPullRequest Boolean   @default(false)
    versionNotes        String?   @db.VarChar(4096)
    pullRequestId       BigInt?   @unique @db.BigInt

    // Type-specific searchable fields
    codeLanguage    String?  @db.VarChar(128) // For code
    resourceSubType String?  @db.VarChar(32)
    isAutomatable   Boolean? // For routines
    complexity      Int? // For routines & projects
    simplicity      Int? // For routines & projects

    // Run fields
    timesStarted   Int        @default(0)
    timesCompleted Int        @default(0)
    runs           run[]      @relation("run_resource_version")
    runSteps       run_step[] @relation("run_step_resource_version")

    // Relations
    root        resource      @relation(fields: [rootId], references: [id], onDelete: Cascade)
    pullRequest pull_request? @relation("pull_request_from_resource_version", fields: [pullRequestId], references: [id], onDelete: SetNull)

    // For linking related versions (e.g., a routine linking to an API, subroutine)
    relatedVersions resource_version_relation[] @relation("from_version")
    referencedBy    resource_version_relation[] @relation("to_version")

    // Child relations
    forks        resource[]             @relation("resource_version_fork")
    translations resource_translation[]
    comments     comment[]
    reports      report[]

    @@unique([rootId, versionIndex], name: "resource_version_rootId_versionIndex_unique")
    @@index([rootId, createdAt], name: "idx_resource_version_rootId_createdAt")
    @@index([rootId, updatedAt], name: "idx_resource_version_rootId_updatedAt")
    @@index([rootId, isLatest], name: "idx_resource_version_rootId_isLatest")
}

model resource_version_relation {
    id            BigInt   @id @db.BigInt
    fromVersionId BigInt   @db.BigInt
    toVersionId   BigInt   @db.BigInt
    relationType  String   @db.VarChar(64) // e.g., "SUBROUTINE", "API_CALL", "CODE_CALL", etc.
    labels        String[]

    fromVersion resource_version @relation("from_version", fields: [fromVersionId], references: [id], onDelete: Cascade)
    toVersion   resource_version @relation("to_version", fields: [toVersionId], references: [id], onDelete: Cascade)

    @@unique([fromVersionId, toVersionId, relationType])
    @@index([fromVersionId], name: "idx_resource_version_relation_fromVersionId")
    @@index([toVersionId], name: "idx_resource_version_relation_toVersionId")
}

model resource_translation {
    id                 BigInt                      @id @db.BigInt
    resourceVersionId  BigInt                      @db.BigInt
    language           String                      @db.VarChar(3)
    embedding          Unsupported("vector(768)")?
    embeddingExpiredAt DateTime?                   @default(now()) @db.Timestamptz(6)

    // Common fields
    name        String  @db.VarChar(128)
    description String? @db.VarChar(2048)

    // Extended content (can store different fields based on resource type)
    details      String? @db.VarChar(8192)
    instructions String? @db.VarChar(8192)

    // Relations
    resourceVersion resource_version @relation(fields: [resourceVersionId], references: [id], onDelete: Cascade)

    @@unique([resourceVersionId, language])
    @@index([resourceVersionId], name: "idx_resource_translation_resourceVersionId")
}

model resource_tag {
    id       BigInt   @id @db.BigInt
    taggedId BigInt   @db.BigInt
    tagTag   String   @db.VarChar(128)
    tagged   resource @relation(fields: [taggedId], references: [id], onDelete: Cascade)
    tag      tag      @relation(fields: [tagTag], references: [tag], onDelete: Cascade)

    @@unique([taggedId, tagTag], name: "resource_tag_taggedId_tagTag_unique")
    @@index([taggedId], name: "idx_resource_tag_taggedId")
    @@index([tagTag], name: "idx_resource_tag_tagTag")
}

model run {
    id                  BigInt            @id @db.BigInt
    createdAt           DateTime          @default(now()) @db.Timestamptz(6)
    updatedAt           DateTime          @updatedAt @db.Timestamptz(6)
    completedComplexity Int               @default(0)
    contextSwitches     Int               @default(0)
    data                String?           @db.VarChar(16384)
    isPrivate           Boolean           @default(false)
    scheduleId          BigInt?           @db.BigInt
    wasRunAutomatically Boolean           @default(false)
    startedAt           DateTime?         @db.Timestamptz(6)
    timeElapsed         Int?
    completedAt         DateTime?         @db.Timestamptz(6)
    name                String            @db.VarChar(128)
    status              RunStatus         @default(Scheduled)
    resourceVersionId   BigInt?           @db.BigInt
    teamId              BigInt?           @db.BigInt
    userId              BigInt?           @db.BigInt
    resourceVersion     resource_version? @relation("run_resource_version", fields: [resourceVersionId], references: [id], onDelete: SetNull)
    schedule            schedule?         @relation("run_schedule", fields: [scheduleId], references: [id], onDelete: SetNull)
    team                team?             @relation("run_team", fields: [teamId], references: [id], onDelete: SetNull)
    user                user?             @relation("run_user", fields: [userId], references: [id], onDelete: Cascade)
    steps               run_step[]        @relation("run_step_run")
    io                  run_io[]          @relation("run_io_run")

    @@index([scheduleId], name: "idx_run_scheduleId")
    @@index([resourceVersionId, createdAt], name: "idx_run_resourceVersionId_createdAt")
    @@index([resourceVersionId, updatedAt], name: "idx_run_resourceVersionId_updatedAt")
    @@index([teamId, createdAt], name: "idx_run_teamId_createdAt")
    @@index([teamId, updatedAt], name: "idx_run_teamId_updatedAt")
    @@index([userId, createdAt], name: "idx_run_userId_createdAt")
    @@index([userId, updatedAt], name: "idx_run_userId_updatedAt")
    @@index([status], name: "idx_run_status")
}

model run_io {
    id            BigInt   @id @db.BigInt
    createdAt     DateTime @default(now()) @db.Timestamptz(6)
    updatedAt     DateTime @updatedAt @db.Timestamptz(6)
    data          String   @db.VarChar(8192)
    nodeInputName String   @db.VarChar(128)
    nodeName      String   @db.VarChar(128)
    runId         BigInt   @db.BigInt
    run           run      @relation("run_io_run", fields: [runId], references: [id], onDelete: Cascade)

    @@index([runId], name: "idx_run_io_runId")
}

model run_step {
    id                BigInt            @id @db.BigInt
    completedAt       DateTime?         @db.Timestamptz(6)
    complexity        Int               @default(0)
    contextSwitches   Int               @default(0)
    name              String            @db.VarChar(128)
    nodeId            String            @db.Uuid
    order             Int               @default(0)
    resourceInId      String            @db.Uuid
    startedAt         DateTime?         @db.Timestamptz(6)
    status            RunStepStatus     @default(InProgress)
    timeElapsed       Int?
    runId             BigInt            @db.BigInt
    resourceVersionId BigInt?           @db.BigInt
    run               run               @relation("run_step_run", fields: [runId], references: [id], onDelete: Cascade)
    resourceVersion   resource_version? @relation("run_step_resource_version", fields: [resourceVersionId], references: [id], onDelete: SetNull)

    @@index([runId], name: "idx_run_step_runId")
    @@index([resourceVersionId], name: "idx_run_step_resourceVersionId")
}

model schedule {
    id            BigInt                      @id @db.BigInt
    publicId      String                      @unique @db.VarChar(12)
    createdAt     DateTime                    @default(now()) @db.Timestamptz(6)
    updatedAt     DateTime                    @updatedAt @db.Timestamptz(6)
    startTime     DateTime
    endTime       DateTime
    timezone      String
    exceptions    schedule_exception[]
    meetings      meeting[]                   @relation("meeting_schedule")
    recurrences   schedule_recurrence[]
    runs          run[]                       @relation("run_schedule")
    subscriptions notification_subscription[]

    @@index([publicId])
    @@index([startTime], name: "idx_schedule_startTime")
}

model schedule_exception {
    id                BigInt    @id @db.BigInt
    scheduleId        BigInt    @db.BigInt
    schedule          schedule  @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
    originalStartTime DateTime
    newStartTime      DateTime?
    newEndTime        DateTime?

    @@index([scheduleId], name: "idx_schedule_exception_scheduleId")
}

model schedule_recurrence {
    id             BigInt                 @id @db.BigInt
    scheduleId     BigInt                 @db.BigInt
    schedule       schedule               @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
    recurrenceType ScheduleRecurrenceType
    interval       Int                    @default(1)
    dayOfWeek      Int?
    dayOfMonth     Int?
    month          Int?
    endDate        DateTime?
    duration       Int?

    @@index([scheduleId], name: "idx_schedule_recurrence_scheduleId")
}

model stats_resource {
    id                        BigInt     @id @db.BigInt
    resourceId                BigInt     @db.BigInt
    periodStart               DateTime   @db.Timestamptz(6)
    periodEnd                 DateTime   @db.Timestamptz(6)
    periodType                PeriodType
    references                Int
    referencedBy              Int
    runsStarted               Int
    runsCompleted             Int
    runCompletionTimeAverage  Float
    runContextSwitchesAverage Float
    resource                  resource   @relation(fields: [resourceId], references: [id], onDelete: Cascade)

    @@unique([resourceId, periodStart, periodEnd, periodType])
    @@index([resourceId], name: "idx_stats_resource_resourceId")
    @@index([periodType, periodStart], name: "idx_stats_resource_periodType_periodStart")
}

model stats_site {
    id          BigInt     @id @db.BigInt
    periodStart DateTime   @db.Timestamptz(6)
    periodEnd   DateTime   @db.Timestamptz(6)
    periodType  PeriodType

    activeUsers            Int
    teamsCreated           Int
    verifiedEmailsCreated  Int
    verifiedWalletsCreated Int

    resourcesCreatedByType              Json? // { "ROUTINE": 100, "CODE": 50 }
    resourcesCompletedByType            Json?
    resourceCompletionTimeAverageByType Json? // { "ROUTINE": 120.5, "CODE": 60.2 }

    routineSimplicityAverage  Float
    routineComplexityAverage  Float
    runsStarted               Int
    runsCompleted             Int
    runCompletionTimeAverage  Float
    runContextSwitchesAverage Float

    @@unique([periodStart, periodEnd, periodType])
    @@index([periodType, periodStart], name: "idx_stats_site_periodType_periodStart")
}

model stats_team {
    id                        BigInt     @id @db.BigInt
    teamId                    BigInt     @db.BigInt
    periodStart               DateTime   @db.Timestamptz(6)
    periodEnd                 DateTime   @db.Timestamptz(6)
    periodType                PeriodType
    resources                 Int
    members                   Int
    runsStarted               Int
    runsCompleted             Int
    runCompletionTimeAverage  Float
    runContextSwitchesAverage Float
    team                      team       @relation(fields: [teamId], references: [id], onDelete: Cascade)

    @@unique([teamId, periodStart, periodEnd, periodType])
    @@index([teamId], name: "idx_stats_team_teamId")
    @@index([periodType, periodStart], name: "idx_stats_team_periodType_periodStart")
}

model stats_user {
    id                                  BigInt     @id @db.BigInt
    userId                              BigInt     @db.BigInt
    periodStart                         DateTime   @db.Timestamptz(6)
    periodEnd                           DateTime   @db.Timestamptz(6)
    periodType                          PeriodType
    resourcesCreatedByType              Json? // { "ROUTINE": 100, "CODE": 50 }
    resourcesCompletedByType            Json?
    resourceCompletionTimeAverageByType Json? // { "ROUTINE": 120.5, "CODE": 60.2 }
    runsStarted                         Int
    runsCompleted                       Int
    runCompletionTimeAverage            Float
    runContextSwitchesAverage           Float
    teamsCreated                        Int
    user                                user       @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([userId, periodStart, periodEnd, periodType])
    @@index([userId], name: "idx_stats_user_userId")
    @@index([periodType, periodStart], name: "idx_stats_user_periodType_periodStart")
}

model tag {
    id           BigInt            @id @db.BigInt
    createdAt    DateTime          @default(now()) @db.Timestamptz(6)
    updatedAt    DateTime          @updatedAt @db.Timestamptz(6)
    tag          String            @unique @db.VarChar(128)
    bookmarks    Int               @default(0)
    createdById  BigInt?           @db.BigInt
    createdBy    user?             @relation("tag_createdBy", fields: [createdById], references: [id], onDelete: SetNull)
    reports      report[]
    resources    resource_tag[]
    teams        team_tag[]
    bookmarkedBy bookmark[]        @relation("bookmark_tag")
    translations tag_translation[]

    @@index([createdById], name: "idx_tag_createdById")
}

model tag_translation {
    id                 BigInt                      @id @db.BigInt
    embedding          Unsupported("vector(768)")?
    embeddingExpiredAt DateTime?                   @default(now()) @db.Timestamptz(6)
    description        String?                     @db.VarChar(2048)
    tagId              BigInt                      @db.BigInt
    language           String                      @db.VarChar(3)
    tag                tag                         @relation(fields: [tagId], references: [id], onDelete: Cascade)

    @@unique([tagId, language], name: "tag_translation_tagId_language_unique")
    @@index([tagId], name: "idx_tag_translation_tagId")
}

model transfer {
    id                    BigInt         @id @db.BigInt
    createdAt             DateTime       @default(now()) @db.Timestamptz(6)
    updatedAt             DateTime       @updatedAt @db.Timestamptz(6)
    status                TransferStatus @default(Pending)
    initializedByReceiver Boolean        @default(false)
    message               String?        @db.VarChar(4096)
    denyReason            String?        @db.VarChar(2048)
    fromTeamId            BigInt?        @db.BigInt
    fromUserId            BigInt?        @db.BigInt
    toTeamId              BigInt?        @db.BigInt
    toUserId              BigInt?        @db.BigInt
    resourceId            BigInt?        @db.BigInt
    fromTeam              team?          @relation("transfer_from_team", fields: [fromTeamId], references: [id], onDelete: SetNull)
    fromUser              user?          @relation("transfer_from_user", fields: [fromUserId], references: [id], onDelete: SetNull)
    toTeam                team?          @relation("transfer_to_team", fields: [toTeamId], references: [id], onDelete: Cascade)
    toUser                user?          @relation("transfer_to_user", fields: [toUserId], references: [id], onDelete: Cascade)
    resource              resource?      @relation("transfer_resource", fields: [resourceId], references: [id], onDelete: Cascade)

    @@index([fromTeamId, createdAt], name: "idx_transfer_fromTeamId_createdAt")
    @@index([fromUserId, createdAt], name: "idx_transfer_fromUserId_createdAt")
    @@index([toTeamId, createdAt], name: "idx_transfer_toTeamId_createdAt")
    @@index([toUserId, createdAt], name: "idx_transfer_toUserId_createdAt")
    @@index([resourceId, createdAt], name: "idx_transfer_resourceId_createdAt")
}

model user {
    id                        BigInt                      @id @db.BigInt
    publicId                  String                      @unique @db.VarChar(12)
    createdAt                 DateTime                    @default(now()) @db.Timestamptz(6)
    updatedAt                 DateTime                    @updatedAt @db.Timestamptz(6)
    bannerImage               String?                     @db.VarChar(2048)
    confirmationCode          String?                     @unique @db.VarChar(256)
    confirmationCodeDate      DateTime?                   @db.Timestamptz(6)
    invitedByUserId           BigInt?                     @db.BigInt
    isBot                     Boolean                     @default(false)
    isBotDepictingPerson      Boolean                     @default(false)
    isPrivate                 Boolean                     @default(false)
    isPrivateMemberships      Boolean                     @default(false)
    isPrivatePullRequests     Boolean                     @default(false)
    isPrivateResources        Boolean                     @default(false)
    isPrivateResourcesCreated Boolean                     @default(false)
    isPrivateTeamsCreated     Boolean                     @default(false)
    isPrivateBookmarks        Boolean                     @default(false)
    isPrivateVotes            Boolean                     @default(false)
    languages                 String[]                    @default([])
    lastExport                DateTime?                   @db.Timestamptz(6)
    lastLoginAttempt          DateTime                    @default(now()) @db.Timestamptz(6)
    logInAttempts             Int                         @default(0)
    numExports                Int                         @default(0)
    name                      String                      @db.VarChar(128)
    profileImage              String?                     @db.VarChar(2048)
    theme                     String                      @default("light") @db.VarChar(255)
    handle                    String?                     @unique @db.Citext
    currentStreak             Int                         @default(0)
    longestStreak             Int                         @default(0)
    accountTabsOrder          String?                     @db.VarChar(255)
    botSettings               String?                     @db.VarChar(4096)
    notificationSettings      String?                     @db.VarChar(2048)
    bookmarks                 Int                         @default(0)
    views                     Int                         @default(0)
    reputation                Int                         @default(0)
    premiumId                 BigInt?                     @unique @db.BigInt
    stripeCustomerId          String?                     @unique @db.VarChar(255)
    status                    AccountStatus               @default(Unlocked)
    apiKeys                   api_key[]
    apiKeysExternal           api_key_external[]
    auths                     user_auth[]
    awards                    award[]
    chatsCreated              chat[]
    chats                     chat_participants[]
    chatsInvited              chat_invite[]
    chatMessages              chat_message[]              @relation("chat_message_user")
    comments                  comment[]                   @relation("comment_ownedByUser")
    emails                    email[]
    phones                    phone[]
    invitedByUser             user?                       @relation("user_invitedByUser", fields: [invitedByUserId], references: [id], onDelete: SetNull)
    invitedUsers              user[]                      @relation("user_invitedByUser")
    issuesCreated             issue[]                     @relation("issue_createdBy")
    issuesClosed              issue[]                     @relation("issue_closedBy")
    meetingsAttending         meeting_attendees[]
    meetingsInvited           meeting_invite[]
    paymentHistory            payment[]
    pushDevices               push_device[]
    notifications             notification[]
    notificationSubscriptions notification_subscription[]
    memberships               member[]
    membershipsInvited        member_invite[]
    premium                   premium?                    @relation(fields: [premiumId], references: [id], onDelete: SetNull)
    pullRequests              pull_request[]              @relation("pull_request_createdBy")
    reminderLists             reminder_list[]             @relation("reminder_list_user")
    reportsReceived           report[]                    @relation("report_user")
    reportsCreated            report[]                    @relation("report_createdBy")
    reportResponses           report_response[]           @relation("report_response_createdBy")
    reputationHistory         reputation_history[]
    resourcesCreated          resource[]                  @relation("resource_createdBy")
    resources                 resource[]                  @relation("resource_ownedByUser")
    runs                      run[]                       @relation("run_user")
    bookmakLists              bookmark_list[]             @relation("bookmark_list_user")
    bookmarkedBy              bookmark[]                  @relation("bookmark_user")
    tags                      tag[]                       @relation("tag_createdBy")
    teamsCreated              team[]                      @relation("team_createdBy")
    transfersIncoming         transfer[]                  @relation("transfer_to_user")
    transfersOutgoing         transfer[]                  @relation("transfer_from_user")
    translations              user_translation[]
    viewed                    view[]                      @relation("view_by")
    viewedBy                  view[]                      @relation("view_user")
    reacted                   reaction[]                  @relation("reaction_by")
    sessions                  session[]
    stats                     stats_user[]
    wallets                   wallet[]

    @@index([publicId], name: "idx_user_publicId")
    @@index([invitedByUserId, createdAt], name: "idx_user_invitedByUserId_createdAt")
}

model user_auth {
    id                              BigInt    @id @db.BigInt
    user_id                         BigInt    @db.BigInt
    provider                        String
    provider_user_id                String?
    hashed_password                 String?
    resetPasswordCode               String?   @unique @db.VarChar(256)
    lastResetPasswordRequestAttempt DateTime? @db.Timestamptz(6)
    createdAt                       DateTime  @default(now()) @db.Timestamptz(6)
    updatedAt                       DateTime  @updatedAt @db.Timestamptz(6)

    user     user      @relation(fields: [user_id], references: [id], onDelete: Cascade)
    sessions session[]

    @@unique([provider, provider_user_id], name: "user_auth_provider_provider_user_id_unique")
    @@index([user_id, createdAt], name: "idx_user_auth_user_id_createdAt")
}

model session {
    id              BigInt    @id @db.BigInt
    user_id         BigInt    @db.BigInt
    auth_id         BigInt    @db.BigInt
    last_refresh_at DateTime  @default(now()) @db.Timestamptz(6)
    createdAt       DateTime  @default(now()) @db.Timestamptz(6)
    updatedAt       DateTime  @updatedAt @db.Timestamptz(6)
    expires_at      DateTime  @db.Timestamptz(6)
    revokedAt       DateTime? @db.Timestamptz(6)
    device_info     String?   @db.VarChar(1024)
    ip_address      String?   @db.VarChar(45)

    user user      @relation(fields: [user_id], references: [id], onDelete: Cascade)
    auth user_auth @relation(fields: [auth_id], references: [id], onDelete: Cascade)

    @@index([user_id], name: "idx_session_user_id")
    @@index([auth_id], name: "idx_session_auth_id")
}

model user_translation {
    id                 BigInt                      @id @db.BigInt
    embedding          Unsupported("vector(768)")?
    embeddingExpiredAt DateTime?                   @default(now()) @db.Timestamptz(6)
    bio                String?                     @db.VarChar(2048)
    userId             BigInt                      @db.BigInt
    language           String                      @db.VarChar(3)
    user               user                        @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([userId, language], name: "user_translation_userId_language_unique")
    @@index([userId], name: "idx_user_translation_userId")
}

model view {
    id           BigInt    @id @db.BigInt
    lastViewedAt DateTime  @default(now()) @db.Timestamptz(6)
    name         String    @db.VarChar(128)
    byId         BigInt    @db.BigInt
    issueId      BigInt?   @db.BigInt
    resourceId   BigInt?   @db.BigInt
    teamId       BigInt?   @db.BigInt
    userId       BigInt?   @db.BigInt
    by           user      @relation("view_by", fields: [byId], references: [id], onDelete: Cascade)
    issue        issue?    @relation("view_issue", fields: [issueId], references: [id], onDelete: Cascade)
    resource     resource? @relation("view_resource", fields: [resourceId], references: [id], onDelete: Cascade)
    team         team?     @relation("view_team", fields: [teamId], references: [id], onDelete: Cascade)
    user         user?     @relation("view_user", fields: [userId], references: [id], onDelete: Cascade)

    @@index([byId, lastViewedAt], name: "idx_view_byId_lastViewedAt")
    @@index([issueId, lastViewedAt], name: "idx_view_issueId_lastViewedAt")
    @@index([resourceId, lastViewedAt], name: "idx_view_resourceId_lastViewedAt")
    @@index([teamId, lastViewedAt], name: "idx_view_teamId_lastViewedAt")
    @@index([userId, lastViewedAt], name: "idx_view_userId_lastViewedAt")
}

model wallet {
    id                BigInt    @id @db.BigInt
    createdAt         DateTime  @default(now()) @db.Timestamptz(6)
    updatedAt         DateTime  @updatedAt @db.Timestamptz(6)
    stakingAddress    String    @unique @db.VarChar(128)
    publicAddress     String?   @unique @db.VarChar(128)
    name              String?   @db.VarChar(128)
    nonce             String?   @db.VarChar(8092)
    nonceCreationTime DateTime? @db.Timestamptz(6)
    verifiedAt        DateTime? @db.Timestamptz(6)
    wasReported       Boolean   @default(false)
    teamId            BigInt?   @db.BigInt
    userId            BigInt?   @db.BigInt
    team              team?     @relation(fields: [teamId], references: [id], onDelete: Cascade)
    user              user?     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([teamId], name: "idx_wallet_teamId")
    @@index([userId], name: "idx_wallet_userId")
}

enum AccountStatus {
    Deleted
    Unlocked
    SoftLocked
    HardLocked
}

enum InviteStatus {
    Pending
    Accepted
    Declined
}

enum IssueStatus {
    Draft
    Open
    Canceled
    ClosedResolved
    ClosedUnresolved
    Rejected
}

enum PaymentStatus {
    Pending
    Paid
    Failed
}

enum PaymentType {
    Credits
    Donation
    PremiumMonthly
    PremiumYearly
}

enum PeriodType {
    Hourly
    Daily
    Weekly
    Monthly
    Yearly
}

enum PullRequestStatus {
    Draft
    Open
    Canceled
    Merged
    Rejected
}

enum ReportStatus {
    ClosedDeleted
    ClosedFalseReport
    ClosedHidden
    ClosedNonIssue
    ClosedSuspended
    Open
}

enum ReportSuggestedAction {
    Delete
    FalseReport
    HideUntilFixed
    NonIssue
    SuspendUser
}

enum RunStatus {
    Scheduled
    InProgress
    Paused
    Completed
    Failed
    Cancelled
}

enum RunStepStatus {
    InProgress
    Completed
    Skipped
}

enum ScheduleRecurrenceType {
    Daily
    Weekly
    Monthly
    Yearly
}

enum TransferStatus {
    Accepted
    Denied
    Pending
}
