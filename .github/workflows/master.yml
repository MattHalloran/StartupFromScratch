name: Master CI/CD

concurrency:
  group: master
  cancel-in-progress: true

on:
  push:
    branches: [master]
  workflow_dispatch:
    inputs:
      ignore_lint_errors:
        description: 'Ignore linting errors'
        required: false
        type: boolean
        default: false
      ignore_test_errors:
        description: 'Ignore test errors'
        required: false
        type: boolean
        default: false

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js 18
        uses: actions/setup-node@v4
        with:
          node-version: 18
      - name: Enable Corepack & Activate pnpm
        run: |
          corepack enable
          corepack prepare pnpm@latest --activate
      - name: Cache pnpm store
        uses: actions/cache@v3
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('pnpm-lock.yaml') }}
      - name: pnpm install (frozen lockfile)
        run: pnpm install --frozen-lockfile
      - name: Lint
        run: pnpm run lint
        continue-on-error: ${{ github.event.inputs.ignore_lint_errors == 'true' }}
      - name: Test
        run: pnpm test
        continue-on-error: ${{ github.event.inputs.ignore_test_errors == 'true' }}
      - name: Build
        run: pnpm run build
      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh
          echo -e "Host *\n \tStrictHostKeyChecking no\n" > ~/.ssh/config
          chmod 600 ~/.ssh/config
      - name: Set up SSH private key
        if: env.VPS_SSH_PRIVATE_KEY != '' # Only run if the secret is set
        run: |
          echo "${{ secrets.VPS_SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
        env:
          VPS_SSH_PRIVATE_KEY: ${{ secrets.VPS_SSH_PRIVATE_KEY }}
      - name: Verify SSH connection
        run: |
          ssh -i ~/.ssh/deploy_key -o BatchMode=yes ${{ secrets.VPS_DEPLOY_USER }}@${{ secrets.VPS_DEPLOY_HOST }} "echo 'SSH OK'"
      - name: Deploy to Production
        run: pnpm run deploy -- --source vps --target prod
        env:
          SSH_KEY_PATH: ~/.ssh/deploy_key
          VPS_DEPLOY_USER: ${{ secrets.VPS_DEPLOY_USER }}
          VPS_DEPLOY_HOST: ${{ secrets.VPS_DEPLOY_HOST }}
          VPS_DEPLOY_PATH: ${{ secrets.VPS_DEPLOY_PATH }} 