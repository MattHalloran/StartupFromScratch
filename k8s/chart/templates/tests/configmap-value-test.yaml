# This manifest defines a Kubernetes Pod that serves as a Helm test.
# Its purpose is to verify that the ConfigMap generated by the chart
# (specifically the '{{ include "vrooli.fullname" . }}-config' ConfigMap)
# has the correct 'env' value, as specified in the Helm chart's 'values.yaml'
# ('.Values.config.env').
apiVersion: v1
kind: Pod
metadata:
  # The name of the test Pod. It includes the full release name to ensure uniqueness.
  name: "{{ include \"vrooli.fullname\" . }}-configmap-value-test"
  labels:
    # Standard labels for identifying the application and release.
    app.kubernetes.io/name: "{{ include \"vrooli.name\" . }}-test"
    app.kubernetes.io/instance: "{{ .Release.Name }}"
    helm.sh/chart: "{{ include \"vrooli.chart\" . }}"
    app.kubernetes.io/managed-by: "{{ .Release.Service }}"
    # Custom label to identify this as a configmap test component.
    app.kubernetes.io/component: configmap-test
  annotations:
    # This annotation designates the Pod as a Helm test hook.
    # Helm will execute this Pod when 'helm test <release-name>' is run.
    "helm.sh/hook": test
    # Defines the deletion policy for the test Pod.
    # 'before-hook-creation': Any existing Pod from a previous test run with the same name will be deleted before this one is created.
    # 'hook-succeeded': The Pod will be deleted automatically if the test passes.
    # If the test fails, the Pod will be kept for inspection.
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
spec:
  volumes:
    # Defines a volume named 'config-volume'.
    # This volume will be populated with data from the specified ConfigMap.
    - name: config-volume
      configMap:
        # The name of the ConfigMap to source data from.
        # '{{ include "vrooli.fullname" . }}-config' should resolve to the main ConfigMap deployed by your chart.
        name: {{ include "vrooli.fullname" . }}-config
  containers:
    # This section defines the container(s) that will run inside the Pod.
    - name: busybox
      # Uses a minimal 'busybox' image, which contains common Unix utilities.
      image: busybox
      command:
        - /bin/sh # Specifies the command interpreter.
        - -ec     # Flags for the shell:
                  #   '-e': Exit immediately if any command fails.
                  #   '-c': Execute the following string as a command.
        # The actual test script to be executed by the shell.
        - |
          echo "Checking ConfigMap value for 'env'..."
          EXPECTED_ENV="{{ .Values.config.env }}"
          ACTUAL_ENV=$(cat /etc/config/env)
          echo "Expected: $EXPECTED_ENV"
          echo "Actual: $ACTUAL_ENV"
          if [ "$ACTUAL_ENV" = "$EXPECTED_ENV" ]; then
            echo "SUCCESS: 'env' value matches!"
            exit 0
          else
            echo "ERROR: 'env' value does NOT match!"
            exit 1
          fi
      volumeMounts:
        # Mounts the 'config-volume' (defined in spec.volumes) into the container.
        - name: config-volume
          # The path inside the container where the 'config-volume' will be accessible.
          # Files from the ConfigMap (like 'env') will appear under this path.
          mountPath: /etc/config
  # Defines the restart policy for all containers in the Pod.
  # 'Never': If the container fails or completes, Kubernetes will not attempt to restart it.
  # This is appropriate for test Pods designed to run once and then exit.
  restartPolicy: Never 