{{- if .Values.persistence.redis.enabled }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "vrooli.fullname" . }}-redis
  labels:
    {{- include "vrooli.labels" . | nindent 4 }}
    app.kubernetes.io/component: redis
spec:
  replicas: {{ .Values.replicaCount.redis }}
  selector:
    matchLabels:
      {{- include "vrooli.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: redis
  serviceName: {{ include "vrooli.fullname" . }}-redis-headless # Important for StatefulSet
  template:
    metadata:
      labels:
        {{- include "vrooli.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: redis
    spec:
      terminationGracePeriodSeconds: 10
      containers:
        - name: redis
          image: "{{ .Values.redis.image.repository }}:{{ .Values.redis.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          args:
            - --save ""
            - --appendonly no
            {{- if and .Values.vso.enabled .Values.vso.secrets.redis .Values.vso.secrets.redis.enabled }}
            - --requirepass $(REDIS_PASSWORD)
            {{- end }}
          ports:
            - name: redis
              containerPort: {{ .Values.redis.port }}
              protocol: TCP
          env:
            {{- if and .Values.vso.enabled .Values.vso.secrets.redis .Values.vso.secrets.redis.enabled }}
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.vso.secrets.redis.k8sSecretName }}
                  key: password # Assuming the key in Vault for redis password is 'password'
            {{- end }}
          livenessProbe:
            exec:
              command:
                - redis-cli
                {{- if and .Values.vso.enabled .Values.vso.secrets.redis .Values.vso.secrets.redis.enabled }}
                - -a
                - $(REDIS_PASSWORD)
                {{- end }}
                - ping
            initialDelaySeconds: 20
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            exec:
              command:
                - redis-cli
                {{- if and .Values.vso.enabled .Values.vso.secrets.redis .Values.vso.secrets.redis.enabled }}
                - -a
                - $(REDIS_PASSWORD)
                {{- end }}
                - ping
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          resources:
            {{- toYaml .Values.redis.resources | nindent 12 }}
          volumeMounts:
            - name: redis-data
              mountPath: /data
      {{- with .Values.redis.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.redis.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.redis.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
  volumeClaimTemplates:
    - metadata:
        name: redis-data
      spec:
        accessModes:
          - ReadWriteOnce # Or ReadWriteMany if your StorageClass and Redis setup supports it
        resources:
          requests:
            storage: {{ .Values.persistence.redis.size }}
        {{- if .Values.persistence.redis.storageClass }}
        {{- if (eq "-" .Values.persistence.redis.storageClass) }}
        storageClassName: ""
        {{- else }}
        storageClassName: "{{ .Values.persistence.redis.storageClass }}"
        {{- end }}
        {{- end }}
{{- end }} 