# ============== INSTRUCTIONS ========================
# Make 2 copies of this file: 
#   - .env-dev (for local development)
#   - .env-prod (for production deployment)
# Then, fill in the appropriate values for each environment.
# ======================================================

# === Domain Settings ===
# Location of project's root directory. Usually /srv/app.
# Likely to be changed if you are hosting multiple sites from the same server.
PROJECT_DIR=/srv/app
# IP address of the remote server (used by deploy/proxy scripts)
SITE_IP=192.81.123.456
# API URL during production
API_URL=https://my-site.com/api

# === Ports ===
PORT_DB=5432
PORT_JOBS=4001
PORT_SERVER=5329
PORT_REDIS=6379
PORT_UI=3000

# === Database Credentials (Required if SECRETS_SOURCE=file) ===
# If using SECRETS_SOURCE=vault, these should be stored in Vault instead.
DB_NAME=vrooli
DB_USER=site
DB_PASSWORD=databasepassword

# === Redis Credentials (Required if SECRETS_SOURCE=file) ===
# If using SECRETS_SOURCE=vault, this should be stored in Vault instead.
REDIS_PASSWORD=redispassword

# ================== SECRETS SOURCE ====================
# Define how the application should load secrets.
# Options: 
#   - file: Load from this .env file (DB_*, REDIS_* must be set above)
#   - vault: Load from HashiCorp Vault (Vault settings below must be configured)
SECRETS_SOURCE=file

# ================= VAULT SETTINGS =====================
# Required if SECRETS_SOURCE=vault

# --- Core Vault Config ---
# Address of the Vault server
VAULT_ADDR=http://127.0.0.1:8200
# Path in Vault KV v2 engine where secrets are stored (e.g., DB_USER, REDIS_PASSWORD)
# Ensure the path matches the environment (e.g., /dev or /prod)
# Example: secret/data/vrooli/prod for production
VAULT_SECRET_PATH=secret/data/vrooli/dev

# --- Vault Authentication Method ---
# Select the method env.sh will use to authenticate to Vault.
# Options: token, approle, kubernetes
# Example: use 'token' for simple local dev, 'kubernetes' in K8s
VAULT_AUTH_METHOD=approle

# --- Token Auth (Needed if VAULT_AUTH_METHOD=token) ---
# A Vault token with permission to read VAULT_SECRET_PATH.
# For local dev, you can use the root token (e.g., 'root') from 'manage_local_vault.sh --start-dev'.
# WARNING: Avoid long-lived/root tokens in production.
VAULT_TOKEN=

# --- AppRole Auth (Needed if VAULT_AUTH_METHOD=approle) ---
# Get these from 'manage_local_vault.sh --setup-dev-approle' for local dev,
# or from your Vault administrator for other environments.
VAULT_ROLE_ID=
VAULT_SECRET_ID=

# --- Kubernetes Auth (Needed if VAULT_AUTH_METHOD=kubernetes) ---
# Usually used when running inside a Kubernetes cluster.
# The Vault role configured to accept authentication from your K8s service account.
VAULT_K8S_ROLE=vrooli-app # Example role name
# Path to the service account JWT token (usually auto-mounted).
# K8S_JWT_PATH=/var/run/secrets/kubernetes.io/serviceaccount/token

# ================= DOCKER HUB =====================
# Optional: Credentials for pushing images to Docker Hub.
# This is required for deploying to K8s, since we can't send zipped images like we can for deployment to a single VPS.
DOCKERHUB_USERNAME=your_dockerhub_username
DOCKERHUB_TOKEN=your_dockerhub_token

# =================== Local Secrets ======================
# Push notifications VAPID keys. See messenger-setup.txt
VAPID_PUBLIC_KEY=the_public_key_generated_from_generate-vapid-keys
VAPID_PRIVATE_KEY=the_private_key_generated_from_generate-vapid-keys
