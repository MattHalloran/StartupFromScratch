# ============== INSTRUCTIONS ========================
# Make 2 copies of this file: 
#   - .env-dev (for local development)
#   - .env-prod (for production deployment)
# Then, fill in the appropriate values for each environment.
#
# General guidelines:
# - Always put comments on a separate line from the variable itself, 
#   so that we don't accidentally include comments in the variable value.
# - Variables are split into sections, which correspond to Vault policies. 
#   This makes it easy to separate sensitive and non-sensitive variables, 
#   and ensures that services are only able to access the variables they need.
# - Make sure you NEVER include a real value in the `.env-example` file.
# ======================================================

# ======================================================
# Policy: vrooli-config-shared-all (Non-Sensitive Configuration)
# Description: Shared non-sensitive configuration for all services (UI, Server, Jobs).
#              These might be synced to a K8s ConfigMap or a K8s Secret (if VSO handles it as such).
# Kubernetes ConfigMap/Secret Name (via VSO): vrooli-config-shared-all
# ======================================================
# Location of project's root directory. Usually /srv/app.
# Likely to be changed if you are hosting multiple sites from the same server.
PROJECT_DIR=/srv/app
# IP address of the remote server, which should match what API_URL points to in its DNS records.
SITE_IP=192.81.123.456
# URL to access the UI (e.g. https://mysite.com)
UI_URL=https://mysite.com
# API URL (e.g. https://mysite.com/api)
API_URL=https://mysite.com/api
# Ports for services (used for internal connections or to define listen ports)
PORT_DB=5432
PORT_JOBS=4001
PORT_SERVER=5329
PORT_REDIS=6379
PORT_UI=3000
# Populates database with fake data. **DISABLE THIS BEFORE PRODUCTION**
CREATE_MOCK_DATA=true
# Specific UI related non-sensitive configurations (often exposed to client-side)
# These are prefixed with VITE_ to be exposed by Vite to the client.
VITE_GOOGLE_ADSENSE_PUBLISHER_ID=ca-pub-xxxxxxxxxxxxxxxx
VITE_GOOGLE_TRACKING_ID=G-XXXXXXXXXX
VITE_STRIPE_PUBLISHABLE_KEY=pk_test_yourstripepublishablekey

# ======================================================
# Policy: vrooli-secrets-postgres
# Description: Credentials for PostgreSQL database access.
# Kubernetes Secret Name (via VSO): vrooli-postgres-creds
# ======================================================
DB_NAME=vrooli
DB_USER=site
DB_PASSWORD=databasepassword

# ======================================================
# Policy: vrooli-secrets-redis
# Description: Credentials for Redis access.
# Kubernetes Secret Name (via VSO): vrooli-redis-creds
# ======================================================
REDIS_PASSWORD=redispassword

# ======================================================
# Policy: vrooli-secrets-dockerhub
# Description: Credentials for pulling images from Docker Hub.
# Kubernetes Secret Name (via VSO): vrooli-dockerhub-pull-secret
# ======================================================
# Optional: Credentials for pushing/pulling images to/from Docker Hub.
# Required for K8s deployments that pull from a private Docker Hub repo.
DOCKERHUB_USERNAME=your_dockerhub_username
DOCKERHUB_TOKEN=your_dockerhub_token # Docker Hub personal access token

# ======================================================
# Policy: vrooli-secrets-shared-server-jobs
# Description: Sensitive secrets shared between the Server and Jobs services.
# Kubernetes Secret Name (via VSO): vrooli-secrets-shared-server-jobs
# ======================================================
# NOTE: JWT keys are stored separately in .pem files - not in here.
# VAPID Keys for Web Push Notifications
VAPID_PUBLIC_KEY=the_public_key_generated_from_generate-vapid-keys
VAPID_PRIVATE_KEY=the_private_key_generated_from_generate-vapid-keys
# Email Service Credentials (e.g., for transactional emails)
SITE_EMAIL_FROM=noreply@example.com
SITE_EMAIL_USERNAME=email_username
SITE_EMAIL_PASSWORD=email_password
SITE_EMAIL_ALIAS="Vrooli App"
# Stripe Credentials (for payment processing)
STRIPE_SECRET_KEY=sk_test_yourstrisecretkey
STRIPE_WEBHOOK_SECRET=whsec_yourstripewebhooksecret
# Twilio Credentials (for SMS/communication services)
TWILIO_ACCOUNT_SID=ACxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
TWILIO_AUTH_TOKEN=yourtwiliotoken
TWILIO_PHONE_NUMBER=+1234567890
# Cloud Provider Credentials (e.g., AWS S3 for file storage)
AWS_ACCESS_KEY_ID=AKIAxxxxxxxxxxxxxxx
AWS_SECRET_ACCESS_KEY=yourawssecretaccesskey
AWS_REGION=us-east-1 # Example region
S3_BUCKET_NAME=your-s3-bucket-name
# External API Keys (e.g., OpenAI, Anthropic, Mistral)
OPENAI_API_KEY=sk-xxxxxxxxxxxxxxxxxxxxxxxxxxxxx
ANTHROPIC_API_KEY=sk-ant-xxxxxxxxxxxxxxxxxxxxxx
MISTRAL_API_KEY=yourmistralkey
# Other sensitive application-specific credentials
ADMIN_WALLET=admin_wallet_address_or_identifier
ADMIN_PASSWORD=secure_admin_password
EXTERNAL_SITE_KEY=some_external_api_key
VALYXA_PASSWORD= # If this is another distinct secret

# ================== SECRETS SOURCE ====================
# Define how the application should load secrets.
# Options: 
#   - file: Load from this .env file (DB_*, REDIS_* must be set above)
#   - vault: Load from HashiCorp Vault (NOTE: Vault settings below must still be configured here)
SECRETS_SOURCE=file

# ================= VAULT SETTINGS =====================
# Required if SECRETS_SOURCE=vault
# --- Core Vault Config ---
# Address of the Vault server
VAULT_ADDR=http://127.0.0.1:8200
# Path in Vault KV v2 engine where secrets are stored (e.g., DB_USER, REDIS_PASSWORD)
# Ensure the path matches the environment (e.g., /dev or /prod)
# Example: secret/data/vrooli/prod for production
VAULT_SECRET_PATH=secret/data/vrooli/dev
# --- Vault Authentication Method ---
# Select the method env.sh will use to authenticate to Vault.
# Options: token, approle, kubernetes
# Example: use 'token' for simple local dev, 'kubernetes' in K8s
VAULT_AUTH_METHOD=approle
# --- Token Auth (Needed if VAULT_AUTH_METHOD=token) ---
# A Vault token with permission to read VAULT_SECRET_PATH.
# For local dev, you can use the root token (e.g., 'root') from 'manage_local_vault.sh --start-dev'.
# WARNING: Avoid long-lived/root tokens in production.
VAULT_TOKEN=
# --- AppRole Auth (Needed if VAULT_AUTH_METHOD=approle) ---
# Get these from 'manage_local_vault.sh --setup-dev-approle' for local dev,
# or from your Vault administrator for other environments.
VAULT_ROLE_ID=
VAULT_SECRET_ID=
# --- Kubernetes Auth (Needed if VAULT_AUTH_METHOD=kubernetes) ---
# Usually used when running inside a Kubernetes cluster.
# The Vault role configured to accept authentication from your K8s service account.
VAULT_K8S_ROLE=vrooli-app # Example role name
# Path to the service account JWT token (usually auto-mounted).
# K8S_JWT_PATH=/var/run/secrets/kubernetes.io/serviceaccount/token

# =================== Kubernetes Cluster Access (Optional) ====================
# You can provide credentials for automated Kubernetes deployments (e.g., CI/CD).
# Method 1: Base64-encoded kubeconfig file for full cluster config
# KUBECONFIG_CONTENT_BASE64=
# Method 2: Programmatic cluster config via individual variables:
# KUBE_API_SERVER=
# KUBE_CA_CERT_PATH=   # Path to CA certificate file (can be base64 decoded in script)
# KUBE_BEARER_TOKEN=   # Bearer token for API authentication (alternative to client certificates)
# KUBE_CLIENT_CERT_PATH=  # Path to client certificate for mTLS auth
# KUBE_CLIENT_KEY_PATH=   # Path to client private key for mTLS auth
