---
description: 
globs: 
alwaysApply: true
---
You have no persistent memory - your memory resets completely between sessions. This design choice ensures you maintain impeccable, clear, and thorough documentation. **After every memory reset, you rely solely on files in /docs.** This acts as your long-term memory back. Reading **ALL** required /docs files at the start of every task is mandatory and non-negotiable.

## Memory Bank (Documenation) Structure

All documentation files are Markdown files, structured clearly to maintain context and progress continuity across resets.

### Core Files (Always Required):

- **[startingPrompt.md](mdc:docs/startingPrompt.md)**  - Initial, approved architecture and setup plan.
- **[architecture.md](mdc:docs/architecture.md)**      - High‑level system architecture.
- **[deployment.md](mdc:docs/deployment.md)**         - Deployment guides (Docker, Kubernetes, VPS).
- **[dev.md](mdc:docs/dev.md)**                       - Local development and Docker instructions.
- **[setup.md](mdc:docs/setup.md)**                   - Installation and environment setup.
- **[build.md](mdc:docs/build.md)**                   - Build and packaging processes.
- **[ci-cd.md](mdc:docs/ci-cd.md)**                   - CI/CD workflow definitions.
- **[testing.md](mdc:docs/testing.md)**               - Testing strategies, setup, and guidelines.

### Task Management

Our project does not currently maintain a `/docs/tasks` directory. Task tracking is managed externally or in dedicated project management tools.

### Temporary Working Files (`/docs/scratch` folder):

- Temporary notes, research results, or drafts generated during the current task
- Clear out or transfer important information after confirmation of task completion

### Project Documentation (`docs/` folder):

Organized documentation covering technical details, integrations, testing, deployments, APIs, and guides.

Recommended organization:

- **Deployment:** Guides for Kubernetes, Docker, serverless deployments, etc.
  - `deploy-kubernetes.md`
  - `deploy-docker.md`

- **Testing:** Documentation for performance, mobile, unit, integration, and end-to-end testing strategies
  - `testing-performance.md`
  - `testing-mobile.md`
  - `testing-strategies.md`

- **API Reference:**
  - Clearly structured API endpoint details, usage, and examples
  - `api-reference.md`

- **Integrations and Infrastructure:** Documentation for third-party integrations, cloud setup, and infrastructure specifics
  - `integrations.md`
  - `infrastructure.md`

- **Other:** Additional docs as necessary (e.g., architectural diagrams, security standards)

---

## Agent Core Workflows

### Initialization Workflow

Every task session begins by reading **ALL** Memory Bank files:

```mermaid
flowchart TD
  Start --> ReadAll[Read ALL Memory Bank Files]
  ReadAll --> VerifyContext[Verify Completeness and Context Clarity]
  VerifyContext --> DecideAction{Ready to Proceed?}
  DecideAction -->|Yes| Act[Continue with Task]
  DecideAction -->|No| Clarify[Request Clarifications]
```

### Documentation Update Workflow

Trigger documentation updates when:

- New project patterns or important insights are identified
- Significant project decisions are made or implemented
- User explicitly requests with **"update memory bank"** (requires reviewing **all files**)
- Context becomes outdated or ambiguous

Prioritize updating `active.md`, `backlog.md`, `staged.md`, `completed.md`, and core docs (`context.md`, `decisions.md`, `risks.md`, `roadmap.md`).

```mermaid
flowchart TD
  Trigger[Documentation Update Triggered]
  Trigger --> Review[Review ALL Memory Bank Files]
  Review --> UpdateTasks[Update Tasks & Task States]
  UpdateTasks --> UpdateCore[Update Core Docs & Context]
  UpdateCore --> Summarize[Summarize Updates Clearly]
```

### Task Execution Workflow

```mermaid
flowchart TD
  Start[Start Task] --> CheckMemory[Check & Read Memory Bank]
  CheckMemory --> UpdateDocs[Update Docs if Needed]
  UpdateDocs --> ExecuteTask[Perform Task]
  ExecuteTask --> UpdateTasks[Update Task Status & Outcomes]
  UpdateTasks --> Summarize[Summarize & Document Results]
```

---

## Key Rules to Remember:

- **Always** start by reading **every** required memory file.
- Maintain each file's integrity and organization rigorously—clarity is critical.
- Clearly document decisions, changes, task outcomes, and discovered insights.
- Update the documentation regularly, proactively, and thoroughly—your effectiveness depends solely on its completeness and accuracy.
- Use `/docs/scratch/` for temporary working information; transfer finalized insights and important details to permanent documenation files before clearing.

This structured and disciplined documentation approach ensures continuous progress and clarity, no matter how many resets occur.
